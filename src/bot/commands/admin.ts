import axios from 'axios';
import { MyContext } from './../interfaces/state';
import { Scenes } from "telegraf";
import { redis } from '..';
import { formatText, handleCommand1, formatNumber, getTopIcon } from '../handlers/commands/handle';
import { checkSubscriptionMiddleware } from '..';
import { PhotoSize } from 'telegraf/typings/core/types/typegram';
import { editMessage as editMessageFromGetAnket } from '../handlers/search/getAnket';

export const adminScene = new Scenes.WizardScene<MyContext>('adminScene', async (ctx) => {
    try {
        const url = process.env.URL;

        const getUser = await axios.get(`${url}/users/${ctx.from?.id}`);

        const user = getUser.data.message;

        if (user.role !== 'admin') {
            await ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.');
            return ctx.scene.leave();
        }

        const adminMessage = `  
 üõ†Ô∏è <b>–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>  
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî  
üìå –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ <b>—Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>.  
–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º:  
                
1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ <b>User ID</b>, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–¥–Ω–æ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π:  
üîπ <b>–ó–∞–±–∞–Ω–∏—Ç—å</b> –∏–ª–∏ <b>—Ä–∞–∑–±–∞–Ω–∏—Ç—å</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
üîπ <b>–í—ã–¥–∞—Ç—å</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>–ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø</b>  
                
2Ô∏è‚É£ –°–æ–∑–¥–∞—Ç—å <b>–≥–ª–æ–±–∞–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</b> –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.  
        
3Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å <b>–ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª—ã</b>.

4Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å <b>—Ä–µ–∫–ª–∞–º—É –≤ –ª–µ–Ω—Ç–µ</b>.
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî  
 `;


        const adminButtons = [
            [{ text: '–í–≤–µ—Å—Ç–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data: 'enter_user_id' }],
            [{ text: '–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', callback_data: 'create_announcement' }],
            [{ text: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã', callback_data: 'subscription_chanels' }],
            [{ text: '–†–µ–∫–ª–∞–º–∞ –≤ –ª–µ–Ω—Ç–µ', callback_data: 'search_chanels' }],
        ];

        await ctx.reply(adminMessage, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: adminButtons
            }
        });


        return ctx.wizard.next();
    } catch (err) {
        if (err instanceof Error) {
            console.error(err.message);
        } else {
            console.error(err)
        }
        ctx.reply(`${err instanceof Error ? err.message : 'Please, check console'}`);
    }
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    if ('data' in ctx.callbackQuery) {
        const message = ctx.callbackQuery.data;

        switch (message) {
            case 'enter_user_id':
                return ctx.scene.enter('sessionUser');

            case 'create_announcement':
                return ctx.scene.enter('advertisemenScene');

            case 'subscription_chanels':
                return ctx.scene.enter('chanelsScene');

            case 'search_chanels':
                return ctx.scene.enter('advertisementInSearch');

            default:
                break
        }
    }
})

export const unbanScene = new Scenes.WizardScene<MyContext>('unbanScene', async (ctx) => {
    try {
        const url = process.env.URL;

        const userId = await redis.get(`session-${ctx.from?.id}`);

        const req = await axios.post(`${url}/report/${userId}/unbanned`);

        if (req.status === 400) {
            throw new Error(JSON.stringify(req.data.message));
        }

        ctx.reply(`<b>–Æ–∑–µ—Ä ${userId}</b> —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω! üéâ`, {
            parse_mode: 'HTML'
        });

        return ctx.scene.leave();
    } catch (err) {
        if (err instanceof Error) {
            console.error(err.message);
        } else {
            console.error(err)
        }
        ctx.reply(`${err instanceof Error ? err.message : 'Please, check console'}`);
    }
});

export const banScene = new Scenes.WizardScene<MyContext>('banScene', async (ctx) => {
    ctx.reply('–í—ã–±–µ—Ä–µ—Ç–µ, –Ω–∞ —Å–∫–æ–ª—å–∫–æ –∑–∞–±–∞–Ω–∏—Ç—å —é–∑–µ—Ä–∞', {
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: '1 –¥–µ–Ω—å',
                        callback_data: 'day_1'
                    }
                ],
                [
                    {
                        text: '7 –¥–Ω–µ–π',
                        callback_data: 'day_7'
                    }
                ],
                [
                    {
                        text: '30 –¥–Ω–µ–π',
                        callback_data: 'day_30'
                    }
                ],
                [
                    {
                        text: '365 –¥–Ω–µ–π',
                        callback_data: 'day_365'
                    }
                ],
            ]
        }
    });

    return ctx.wizard.next();
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    let daylet;

    if ('data' in ctx.callbackQuery) {
        const day = ctx.callbackQuery.data.split("_")[1]

        daylet = Number(day);
    }

    try {
        const url = process.env.URL;

        const userId = await redis.get(`session-${ctx.from?.id}`);

        const req = await axios.post(`${url}/report/${userId}/banned`, {
            days: daylet
        });

        if (req.status === 400) {
            throw new Error(JSON.stringify(req.data.message));
        }

        await ctx.reply(`<b>–Æ–∑–µ—Ä ${userId}</b> —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ <b>${daylet === 1 ? `${daylet} –¥–µ–Ω—å` : `${daylet} –¥–Ω–µ–π`}</b>! üéâ\n–¢–µ–ø–µ—Ä—å –æ–Ω –Ω–µ —Å–º–æ–∂–µ—Ç –±–æ–ª—å—à–µ –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞. üö´`, {
            parse_mode: 'HTML'
        });

        return ctx.scene.leave();
    } catch (err) {
        if (err instanceof Error) {
            console.error(err.message);
        } else {
            console.error(err)
        }
        ctx.reply(`${err instanceof Error ? err.message : 'Please, check console'}`);
    }
});

export const premiumSceneAdmin = new Scenes.WizardScene<MyContext>('premiumSceneAdmin', async (ctx) => {
    ctx.reply('–í—ã–±–µ—Ä–µ—Ç–µ, –Ω–∞ —Å–∫–æ–ª—å–∫–æ —é–∑–µ—Ä—É –≤—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º', {
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: '1 –¥–µ–Ω—å',
                        callback_data: 'day_1'
                    }
                ],
                [
                    {
                        text: '7 –¥–Ω–µ–π',
                        callback_data: 'day_7'
                    }
                ],
                [
                    {
                        text: '30 –¥–Ω–µ–π',
                        callback_data: 'day_30'
                    }
                ],
                [
                    {
                        text: '365 –¥–Ω–µ–π',
                        callback_data: 'day_365'
                    }
                ],
            ]
        }
    });

    return ctx.wizard.next();
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    let daylet;

    if ('data' in ctx.callbackQuery) {
        const day = ctx.callbackQuery.data.split("_")[1]

        daylet = Number(day);
    }

    try {
        const url = process.env.URL;
        const userId = await redis.get(`session-${ctx.from?.id}`);


        const req = await axios.put(`${url}/users/${userId}/premium`, {
            premium: true,
            days: daylet
        });


        if (req.status === 400) {
            throw new Error(JSON.stringify(req.data));
        }

        await ctx.reply(`–Æ–∑–µ—Ä ${userId} —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–º–∏—É–º –Ω–∞ ${daylet === 1 ? `${daylet} –¥–µ–Ω—å` : `${daylet} –¥–Ω–µ–π`}`);

        return ctx.scene.leave();
    } catch (err) {
        if (err instanceof Error) {
            console.error(err.message);
        } else {
            console.error(err)
        }
        ctx.reply(`${err instanceof Error ? err.message : 'Please, check console'}`);
        return ctx.scene.leave();
    }
});

export const sessionUser = new Scenes.WizardScene<MyContext>('sessionUser', async (ctx) => {
    await ctx.reply('üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>User ID</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π.', { parse_mode: 'HTML' });

    return ctx.wizard.next();
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                const message = ctx.message?.text;

                if (ctx.session.sendMessage) {
                    const result = await editMessageFromGetAnket(ctx);

                    if (!result) {
                        console.log('–û—à–∏–±–∫–∞ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!');
                    }
                }

                if (message.startsWith('/')) {
                    switch (message) {
                        case '/profile':
                            return ctx.scene.enter('profileScene');
                        case '/search':
                            return ctx.scene.enter('ancetScene');
                        case '/likes':
                            return ctx.scene.enter('getLikes');
                        case '/metches':
                            return ctx.scene.enter('getMetch');
                        case '/reported':
                            return ctx.scene.enter('reportScene');
                        case '/help':
                            await ctx.reply(
                                '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
                                'üîπ <b>/profile</b> - –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å\n' +
                                'üîπ <b>/search</b> - –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç\n' +
                                'üîπ <b>/likes</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –ª–∞–π–∫–æ–≤\n' +
                                'üîπ <b>/metches</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ç—á–µ–π\n' +
                                'üîπ <b>/help</b> - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥',
                                {
                                    parse_mode: 'HTML'
                                }
                            );
                            break;
                        case '/luchaevaMuda':
                            return ctx.scene.enter('adminScene');
                        case '/reported':
                            return ctx.scene.enter('reportScene');
                        default:
                            await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.');
                            break;
                    }
                    return;
                }

                switch (message) {
                    case 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
                        return ctx.scene.enter('profileScene');
                    case 'üîç –ü–æ–∏—Å–∫':
                        return ctx.scene.enter('ancetScene');
                    case '‚ù§Ô∏è –õ–∞–π–∫–∏':
                        return ctx.scene.enter('getLikes');
                    case 'üíå –ú–µ—Ç—á–∏':
                        return ctx.scene.enter('getMetch');
                    default:
                        const id = ctx.message.text;

                        if (!/^\d+$/.test(id)) {
                            await ctx.reply('‚ö†Ô∏è <b>–û—à–∏–±–∫–∞!</b>\nID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ –±—É–∫–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤.', { parse_mode: "HTML" });
                            return
                        }

                        try {
                            const url = process.env.URL;
                            const req = await axios.get(`${url}/users/${id}`);

                            const userData = req.data.message;

                            console.log(userData);

                            const iconsTop = getTopIcon(userData.top);
                            const formatNumberCoin = formatNumber(userData.coin);
                            const formatNumberLike = formatNumber(userData.like);
                            const formatNumberDislike = formatNumber(userData.dislike);

                            const profileMessage = `
<b>${userData.premium ? '‚≠ê PREMIUM ‚≠ê' : 'üíò –ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}</b>
${iconsTop} <b>–ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ:</b> ${userData.top}
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî  
${userData.gender ? 'üë±üèª‚Äç‚ôÄÔ∏è' : 'üë±üèª'} <b>–ò–º—è:</b> ${userData.name}  
üéÇ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> ${userData.age}   
üìç <b>–ì–æ—Ä–æ–¥:</b> ${userData.city}  
üìñ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${userData.description}  
üéØ <b>–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:</b> ${userData.minAge} - ${userData.maxAge}
${userData.searchGender ? 'üë±üèª‚Äç‚ôÄÔ∏è' : 'üë±üèª'} <b>–ü–æ–ª –ø–æ–∏—Å–∫–∞:</b> ${userData.searchGender ? '–ñ–µ–Ω—Å–∫–∏–π' : '–ú—É–∂—Å–∫–æ–π'}    
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
‚ù§Ô∏è <b>–õ–∞–π–∫–æ–≤:</b> ${formatNumberLike}  
üëé <b>–î–∏–∑–ª–∞–π–∫–æ–≤:</b> ${formatNumberDislike}  
üí† <b>–ì–µ–º—ã:</b> ${formatNumberCoin}  
 `;
                            if (userData.role === 'admin') {
                                await ctx.reply('‚ö†Ô∏è <b>–û—à–∏–±–∫–∞!</b>\n–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.', { parse_mode: "HTML" });

                                return ctx.scene.leave();
                            }

                            await redis.set(`session-${ctx.from?.id}`, `${id}`);

                            const buttons = {
                                reply_markup: {
                                    inline_keyboard: userData.banned
                                        ? [
                                            [{ text: 'üö´ –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data: 'unban' }]
                                        ]
                                        : [
                                            [{ text: 'üîí –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data: 'ban' }],
                                            [{ text: '‚ú® –í—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º', callback_data: 'premium' }]
                                        ]
                                }
                            };

                            await ctx.replyWithPhoto(userData.photo || '', {
                                caption: profileMessage,
                                parse_mode: "HTML",
                                ...buttons
                            })

                            return ctx.wizard.next();
                        } catch (err) {
                            if (err instanceof Error) {
                                console.error(err.message);
                            } else {
                                console.error(err)
                            }
                            await ctx.reply(`${err instanceof Error ? err.message : 'Please, check console'}`);
                        }
                }
            }
        }
        return
    }
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    if ('data' in ctx.callbackQuery) {
        const message2 = ctx.callbackQuery.data;

        switch (message2) {
            case 'unban':
                return ctx.scene.enter('unbanScene')

            case 'ban':
                return ctx.scene.enter('banScene')

            case 'premium':
                return ctx.scene.enter('premiumSceneAdmin')

            default:
                break
        }
    }
})

export const advertisemenScene = new Scenes.WizardScene<MyContext>('advertisemenScene', async (ctx) => {
    await ctx.reply(
        `<b>üì¢ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</b>\n\n` +
        `–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. –≠—Ç–æ –±—É–¥–µ—Ç –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!`,
        {
            parse_mode: 'HTML', reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–í—ã–π—Ç–∏ —Å —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—è–≤–ª–µ–Ω–∏—è',
                            callback_data: 'exit-advertisemen'
                        }
                    ]
                ]
            }
        }
    );

    return ctx.wizard.next();

}, async (ctx) => {

    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                const message = ctx.message?.text;

                if (ctx.session.sendMessage) {
                    const result = await editMessageFromGetAnket(ctx);

                    if (!result) {
                        console.log('–û—à–∏–±–∫–∞ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!');
                    }
                }

                if (message.startsWith('/')) {
                    switch (message) {
                        case '/profile':
                            return ctx.scene.enter('profileScene');
                        case '/search':
                            ctx.session.sendMessage = 0
                            ctx.session.keyboard = true
                            return ctx.scene.enter('ancetScene');
                        case '/send':
                            ctx.session.exitGems = false
                            ctx.session.sendMessage = 0
                            return ctx.scene.enter('sendGems');
                        case '/likes':
                            return ctx.scene.enter('getLikes');
                        case '/metches':
                            ctx.session.sendMessage = 0;
                            ctx.session.count = 0;
                            return ctx.scene.enter('getMetch');
                        case '/reported':
                            return ctx.scene.enter('reportScene');
                        case '/nexySession':
                            ctx.reply(JSON.stringify(ctx.session));
                            return ctx.scene.leave();
                        case '/top':
                            ctx.session.sendMessage = 0
                            ctx.session.countTop = 1
                            return ctx.scene.enter('topScenes');
                        case '/shop':
                            ctx.session.exitGems = false;
                            return ctx.scene.enter("shopScene");
                        case '/case':
                            return ctx.scene.enter('caseScene');
                        case '/ref':
                            return ctx.scene.enter("referalScene");
                        case '/help':
                            await ctx.reply(
                                '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
                                'üîπ <b>/profile</b> - –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å\n' +
                                'üîπ <b>/search</b> - –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç\n' +
                                'üîπ <b>/likes</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –ª–∞–π–∫–æ–≤\n' +
                                'üîπ <b>/metches</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ç—á–µ–π\n' +
                                'üîπ <b>/top</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–ø–∞ —é–∑–µ—Ä–∞\n' +
                                'üîπ <b>/send</b> - –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–º–æ–≤\n' +
                                'üîπ <b>/shop</b> - –ú–∞–≥–∞–∑–∏–Ω\n' +
                                'üîπ <b>/case</b> - –ö–µ–π—Å—ã\n' +
                                'üîπ <b>/ref</b> - –†–µ—Ñ–µ—Ä–∞–ª–∫–∞\n' +
                                'üîπ <b>/help</b> - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥',
                                {
                                    parse_mode: 'HTML'
                                }
                            );
                            break;
                        case '/luchaevaMuda':
                            return ctx.scene.enter('adminScene');
                        case '/reported':
                            return ctx.scene.enter('reportScene');
                        case '/exitNexy':
                            try {
                                const url = process.env.URL;

                                const getUser = await axios.get(`${url}/users/${ctx.from?.id}`);

                                const user = getUser.data.message;

                                if (user.role !== 'admin') {
                                    await ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.');
                                    return
                                }

                                await ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –≤—Å–µ —Å–µ—Å—Å–∏–∏! –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–≤–æ–∞—Ç—å /clearNexySession –∏–ª–∏ /nexySession –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏–∏ —Å–µ—Å—Å–∏–∏')
                                return ctx.scene.leave();
                            } catch (err) {
                                if (err instanceof Error) {
                                    console.error(err.message);
                                } else {
                                    console.error(err);
                                }

                                await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —é–∑–µ—Ä–∞! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ–∑–µ —Ä–∞–∑');

                            }

                        default:
                            await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.');
                            break;
                    }
                    return;
                }

                switch (message) {
                    case 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
                        return ctx.scene.enter('profileScene');
                    case 'üîç –ü–æ–∏—Å–∫':
                        ctx.session.keyboard = true
                        ctx.session.sendMessage = 0
                        return ctx.scene.enter('ancetScene');
                    case '‚ù§Ô∏è –õ–∞–π–∫–∏':
                        return ctx.scene.enter('getLikes');
                    case 'üíå –ú–µ—Ç—á–∏':
                        ctx.session.count = 0;
                        ctx.session.sendMessage = 0;
                        return ctx.scene.enter('getMetch');
                    case 'ü•á –¢–æ–ø':
                        ctx.session.sendMessage = 0
                        ctx.session.countTop = 1
                        return ctx.scene.enter('topScenes');
                    case 'üì¶ –ö–µ–π—Å—ã':
                        return ctx.scene.enter('caseScene');
                    case 'üõí –ú–∞–≥–∞–∑–∏–Ω':
                        ctx.session.exitGems = false;
                        return ctx.scene.enter("shopScene");
                    case 'üîó –†–µ—Ñ–µ—Ä–∞–ª–∫–∞':
                        return ctx.scene.enter("referalScene");
                    case 'üí† –ì–µ–º—ã':
                        ctx.session.exitGems = false
                        ctx.session.sendMessage = 0
                        return ctx.scene.enter('sendGems');
                    default:
                        try {
                            const url = process.env.URL;

                            const req = await axios.post(`${url}/report`, {
                                message: message
                            });

                            if (req.status === 400) {
                                throw new Error(JSON.stringify(req.data.message));
                            }

                            await ctx.reply(
                                `<b>‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n` +
                                `–¢–µ–ø–µ—Ä—å –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.`,
                                { parse_mode: 'HTML' }
                            );

                            return ctx.scene.leave()
                        } catch (err) {
                            if (err instanceof Error) {
                                console.error('err:' + err.message);
                            }

                            await ctx.reply(
                                `<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è!</b>\n\n` +
                                `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ <b>–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å</b> –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É.`,
                                { parse_mode: 'HTML' }
                            );
                        }
                        return;
                }
            }
        }
        return
    }

    if ('data' in ctx.callbackQuery) {
        if (ctx.callbackQuery.data === 'exit-advertisemen') {
            ctx.scene.enter('adminScene');
        }
    }

});

export const chanelsScene = new Scenes.WizardScene<MyContext>('chanelsScene', async (ctx) => {
    await ctx.reply(
        `üìå <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏</b>\n\n` +
        `–í —ç—Ç–æ–º –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ:\n` +
        `1Ô∏è‚É£ <b>–î–æ–±–∞–≤–∏—Ç—å</b> –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏\n` +
        `2Ô∏è‚É£ <b>–£–¥–∞–ª–∏—Ç—å</b> –∫–∞–Ω–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è`,
        {
            parse_mode: 'HTML', reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–î–æ–±–∞–≤–∏—Ç—å',
                            callback_data: 'add_chanels'
                        },
                        {
                            text: '–£–¥–∞–ª–∏—Ç—å',
                            callback_data: 'delete_chanels'
                        }
                    ]
                ]
            }
        }
    );


    return ctx.wizard.next();
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    if ('data' in ctx.callbackQuery) {
        const message = ctx.callbackQuery.data;

        switch (message) {
            case 'add_chanels':
                return ctx.scene.enter('addChanelsScene');

            case 'delete_chanels':
                return ctx.scene.enter('deleteChanelsScene');

            default:
                break
        }
    }
});

export const addChanelsScene = new Scenes.WizardScene<MyContext>('addChanelsScene', async (ctx) => {
    await ctx.reply('üì¢ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∫–∞–Ω–∞–ª–∞</b> —á–µ—Ä–µ–∑ @, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>@example_channel</code>', {
        parse_mode: 'HTML',
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: '–í—ã–π—Ç–∏',
                        callback_data: 'exit-chanels'
                    }
                ]
            ]
        }
    });

    return ctx.wizard.next();
}, async (ctx) => {

    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                const message = ctx.message?.text;

                if (ctx.session.sendMessage) {
                    const result = await editMessageFromGetAnket(ctx);

                    if (!result) {
                        console.log('–û—à–∏–±–∫–∞ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!');
                    }
                }

                if (message.startsWith('/')) {
                    switch (message) {
                        case '/profile':
                            return ctx.scene.enter('profileScene');
                        case '/search':
                            ctx.session.sendMessage = 0
                            ctx.session.keyboard = true
                            return ctx.scene.enter('ancetScene');
                        case '/send':
                            ctx.session.exitGems = false
                            ctx.session.sendMessage = 0
                            return ctx.scene.enter('sendGems');
                        case '/likes':
                            return ctx.scene.enter('getLikes');
                        case '/metches':
                            ctx.session.sendMessage = 0;
                            ctx.session.count = 0;
                            return ctx.scene.enter('getMetch');
                        case '/reported':
                            return ctx.scene.enter('reportScene');
                        case '/nexySession':
                            ctx.reply(JSON.stringify(ctx.session));
                            return ctx.scene.leave();
                        case '/top':
                            ctx.session.sendMessage = 0
                            ctx.session.countTop = 1
                            return ctx.scene.enter('topScenes');
                        case '/shop':
                            ctx.session.exitGems = false;
                            return ctx.scene.enter("shopScene");
                        case '/case':
                            return ctx.scene.enter('caseScene');
                        case '/ref':
                            return ctx.scene.enter("referalScene");
                        case '/help':
                            await ctx.reply(
                                '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
                                'üîπ <b>/profile</b> - –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å\n' +
                                'üîπ <b>/search</b> - –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç\n' +
                                'üîπ <b>/likes</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –ª–∞–π–∫–æ–≤\n' +
                                'üîπ <b>/metches</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ç—á–µ–π\n' +
                                'üîπ <b>/top</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–ø–∞ —é–∑–µ—Ä–∞\n' +
                                'üîπ <b>/send</b> - –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–º–æ–≤\n' +
                                'üîπ <b>/shop</b> - –ú–∞–≥–∞–∑–∏–Ω\n' +
                                'üîπ <b>/case</b> - –ö–µ–π—Å—ã\n' +
                                'üîπ <b>/ref</b> - –†–µ—Ñ–µ—Ä–∞–ª–∫–∞\n' +
                                'üîπ <b>/help</b> - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥',
                                {
                                    parse_mode: 'HTML'
                                }
                            );
                            break;
                        case '/luchaevaMuda':
                            return ctx.scene.enter('adminScene');
                        case '/reported':
                            return ctx.scene.enter('reportScene');
                        case '/exitNexy':
                            try {
                                const url = process.env.URL;

                                const getUser = await axios.get(`${url}/users/${ctx.from?.id}`);

                                const user = getUser.data.message;

                                if (user.role !== 'admin') {
                                    await ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.');
                                    return
                                }

                                await ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –≤—Å–µ —Å–µ—Å—Å–∏–∏! –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–≤–æ–∞—Ç—å /clearNexySession –∏–ª–∏ /nexySession –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏–∏ —Å–µ—Å—Å–∏–∏')
                                return ctx.scene.leave();
                            } catch (err) {
                                if (err instanceof Error) {
                                    console.error(err.message);
                                } else {
                                    console.error(err);
                                }

                                await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —é–∑–µ—Ä–∞! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ–∑–µ —Ä–∞–∑');

                            }

                        default:
                            await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.');
                            break;
                    }
                    return;
                }

                switch (message) {
                    case 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
                        return ctx.scene.enter('profileScene');
                    case 'üîç –ü–æ–∏—Å–∫':
                        ctx.session.keyboard = true
                        ctx.session.sendMessage = 0
                        return ctx.scene.enter('ancetScene');
                    case '‚ù§Ô∏è –õ–∞–π–∫–∏':
                        return ctx.scene.enter('getLikes');
                    case 'üíå –ú–µ—Ç—á–∏':
                        ctx.session.count = 0;
                        ctx.session.sendMessage = 0;
                        return ctx.scene.enter('getMetch');
                    case 'ü•á –¢–æ–ø':
                        ctx.session.sendMessage = 0
                        ctx.session.countTop = 1
                        return ctx.scene.enter('topScenes');
                    case 'üì¶ –ö–µ–π—Å—ã':
                        return ctx.scene.enter('caseScene');
                    case 'üõí –ú–∞–≥–∞–∑–∏–Ω':
                        ctx.session.exitGems = false;
                        return ctx.scene.enter("shopScene");
                    case 'üîó –†–µ—Ñ–µ—Ä–∞–ª–∫–∞':
                        return ctx.scene.enter("referalScene");
                    case 'üí† –ì–µ–º—ã':
                        ctx.session.exitGems = false
                        ctx.session.sendMessage = 0
                        return ctx.scene.enter('sendGems');
                    default:
                        try {
                            const url = process.env.URL;
                            const req = await axios.post(`${url}/chanels`, {
                                message: message
                            });

                            if (req.status === 400) {
                                throw new Error(JSON.stringify(req.data.message));
                            }

                            await ctx.reply(
                                `‚úÖ <b>–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω</b> –≤ —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö!`,
                                { parse_mode: 'HTML' }
                            );

                            return ctx.scene.enter('adminScene');
                        } catch (err) {
                            if (err instanceof Error) {
                                console.error(err.message);
                            } else {
                                console.error(err);
                            }

                            ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.');
                        }
                        return;
                }

            }
        }
        return
    }

    if ('data' in ctx.callbackQuery) {
        const message = ctx.callbackQuery.data;

        switch (message) {
            case 'exit-chanels':
                await ctx.scene.enter('adminScene');
            default:
                break
        }
    }
})

export const deleteChanelsScene = new Scenes.WizardScene<MyContext>('deleteChanelsScene', async (ctx) => {
    await ctx.reply(
        'üì¢ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∫–∞–Ω–∞–ª–∞</b> —á–µ—Ä–µ–∑ @, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: <code>@example_channel</code>',
        {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–í—ã–π—Ç–∏',
                            callback_data: 'exit_delete_channels'
                        }
                    ]
                ]
            }
        }
    );


    return ctx.wizard.next();
}, async (ctx) => {

    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                const message = ctx.message?.text;

                if (ctx.session.sendMessage) {
                    const result = await editMessageFromGetAnket(ctx);

                    if (!result) {
                        console.log('–û—à–∏–±–∫–∞ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!');
                    }
                }

                if (message.startsWith('/')) {
                    switch (message) {
                        case '/profile':
                            return ctx.scene.enter('profileScene');
                        case '/search':
                            ctx.session.sendMessage = 0
                            ctx.session.keyboard = true
                            return ctx.scene.enter('ancetScene');
                        case '/send':
                            ctx.session.exitGems = false
                            ctx.session.sendMessage = 0
                            return ctx.scene.enter('sendGems');
                        case '/likes':
                            return ctx.scene.enter('getLikes');
                        case '/metches':
                            ctx.session.sendMessage = 0;
                            ctx.session.count = 0;
                            return ctx.scene.enter('getMetch');
                        case '/reported':
                            return ctx.scene.enter('reportScene');
                        case '/nexySession':
                            ctx.reply(JSON.stringify(ctx.session));
                            return ctx.scene.leave();
                        case '/top':
                            ctx.session.sendMessage = 0
                            ctx.session.countTop = 1
                            return ctx.scene.enter('topScenes');
                        case '/shop':
                            ctx.session.exitGems = false;
                            return ctx.scene.enter("shopScene");
                        case '/case':
                            return ctx.scene.enter('caseScene');
                        case '/ref':
                            return ctx.scene.enter("referalScene");
                        case '/help':
                            await ctx.reply(
                                '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
                                'üîπ <b>/profile</b> - –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å\n' +
                                'üîπ <b>/search</b> - –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç\n' +
                                'üîπ <b>/likes</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –ª–∞–π–∫–æ–≤\n' +
                                'üîπ <b>/metches</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ç—á–µ–π\n' +
                                'üîπ <b>/top</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–ø–∞ —é–∑–µ—Ä–∞\n' +
                                'üîπ <b>/send</b> - –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–º–æ–≤\n' +
                                'üîπ <b>/shop</b> - –ú–∞–≥–∞–∑–∏–Ω\n' +
                                'üîπ <b>/case</b> - –ö–µ–π—Å—ã\n' +
                                'üîπ <b>/ref</b> - –†–µ—Ñ–µ—Ä–∞–ª–∫–∞\n' +
                                'üîπ <b>/help</b> - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥',
                                {
                                    parse_mode: 'HTML'
                                }
                            );
                            break;
                        case '/luchaevaMuda':
                            return ctx.scene.enter('adminScene');
                        case '/reported':
                            return ctx.scene.enter('reportScene');
                        case '/exitNexy':
                            try {
                                const url = process.env.URL;

                                const getUser = await axios.get(`${url}/users/${ctx.from?.id}`);

                                const user = getUser.data.message;

                                if (user.role !== 'admin') {
                                    await ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.');
                                    return
                                }

                                await ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –≤—Å–µ —Å–µ—Å—Å–∏–∏! –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–≤–æ–∞—Ç—å /clearNexySession –∏–ª–∏ /nexySession –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏–∏ —Å–µ—Å—Å–∏–∏')
                                return ctx.scene.leave();
                            } catch (err) {
                                if (err instanceof Error) {
                                    console.error(err.message);
                                } else {
                                    console.error(err);
                                }

                                await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —é–∑–µ—Ä–∞! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ–∑–µ —Ä–∞–∑');

                            }

                        default:
                            await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.');
                            break;
                    }
                    return;
                }

                switch (message) {
                    case 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
                        return ctx.scene.enter('profileScene');
                    case 'üîç –ü–æ–∏—Å–∫':
                        ctx.session.keyboard = true
                        ctx.session.sendMessage = 0
                        return ctx.scene.enter('ancetScene');
                    case '‚ù§Ô∏è –õ–∞–π–∫–∏':
                        return ctx.scene.enter('getLikes');
                    case 'üíå –ú–µ—Ç—á–∏':
                        ctx.session.count = 0;
                        ctx.session.sendMessage = 0;
                        return ctx.scene.enter('getMetch');
                    case 'ü•á –¢–æ–ø':
                        ctx.session.sendMessage = 0
                        ctx.session.countTop = 1
                        return ctx.scene.enter('topScenes');
                    case 'üì¶ –ö–µ–π—Å—ã':
                        return ctx.scene.enter('caseScene');
                    case 'üõí –ú–∞–≥–∞–∑–∏–Ω':
                        ctx.session.exitGems = false;
                        return ctx.scene.enter("shopScene");
                    case 'üîó –†–µ—Ñ–µ—Ä–∞–ª–∫–∞':
                        return ctx.scene.enter("referalScene");
                    case 'üí† –ì–µ–º—ã':
                        ctx.session.exitGems = false
                        ctx.session.sendMessage = 0
                        return ctx.scene.enter('sendGems');
                    default:
                        try {
                            const url = process.env.URL;
                            const req = await axios.delete(`${url}/chanels/${message}`,);

                            if (req.status === 400) {
                                throw new Error(JSON.stringify(req.data.message));
                            }

                            await ctx.reply(
                                `‚úÖ <b>–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω</b> –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö!`,
                                { parse_mode: 'HTML' }
                            );

                            return ctx.scene.enter('adminScene');
                        } catch (err) {
                            if (err instanceof Error) {
                                console.error(err.message);
                            } else {
                                console.error(err);
                            }

                            ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.');
                        }
                        return;
                }

            }
        }
        return
    }

    if ('data' in ctx.callbackQuery) {
        const message = ctx.callbackQuery.data;

        switch (message) {
            case 'exit-chanels':
                await ctx.scene.enter('adminScene');
            default:
                break
        }
    }
});

export const advertisementInSearch = new Scenes.WizardScene<MyContext>('advertisementInSearch', async (ctx) => {
    await ctx.reply(
        `üìå <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –¥–ª—è –ª–µ–Ω—Ç—ã</b>\n\n` +
        `–í —ç—Ç–æ–º –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ:\n` +
        `1Ô∏è‚É£ <b>–°–æ–∑–¥–∞—Ç—å</b> –Ω–æ–≤—É—é —Ä–µ–∫–ª–∞–º–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –≤ –ª–µ–Ω—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n` +
        `2Ô∏è‚É£ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å</b> —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π\n` +
        `3Ô∏è‚É£ <b>–£–¥–∞–ª–∏—Ç—å</b> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ä–µ–∫–ª–∞–º–Ω—É—é –∫–∞–º–ø–∞–Ω–∏—é\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ ‚¨áÔ∏è`,
        {
            parse_mode: 'HTML', reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–°–æ–∑–¥–∞—Ç—å —Ä–µ–∫–ª–∞–º—É',
                            callback_data: 'create_advertisement'
                        }
                    ],
                    [
                        {
                            text: '–°–ø–∏—Å–æ–∫',
                            callback_data: 'get_advertisement'
                        }
                    ],
                    [
                        {
                            text: '–£–¥–∞–ª–∏—Ç—å —Ä–µ–∫–ª–∞–º—É',
                            callback_data: 'delete_advertisement'
                        }
                    ]
                ]
            }
        }
    );

    return ctx.wizard.next();
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    if ('data' in ctx.callbackQuery) {
        const message = ctx.callbackQuery.data;

        switch (message) {
            case 'create_advertisement':
                return ctx.scene.enter('createAdvertisementScenes');

            case 'get_advertisement':
                return ctx.scene.enter('getAdvertisementScenes');

            case 'delete_advertisement':
                return ctx.scene.enter('deleteAdvertisementScenes');

            default:
                await ctx.reply(
                    '‚ö†Ô∏è <b>–¢—ã –Ω–∞–∂–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ!</b> –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑. üîÑ',
                    { parse_mode: 'HTML' }
                );
                break
        }
    }

});

export const createAdvertisementScenes = new Scenes.WizardScene<MyContext>('createAdvertisementScenes', async (ctx) => {
    ctx.session.createAdvertisement = {
        text: '',
        photo: '',
        link: '',
        day: 0,
    }

    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ —Ä–µ–∫–ª–∞–º—ã. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ HTML-–ø–æ–¥–æ–±–Ω—ã–π. –°–¥–µ–ª–∞—Ç—å —ç—Ç–æ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å - https://chatgpt.com', {
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: '–í—ã–π—Ç–∏',
                        callback_data: 'cancel'
                    }
                ]
            ]
        }
    });

    return ctx.wizard.next();
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                const message = ctx.message?.text;

                const checkSubscription = await checkSubscriptionMiddleware(ctx)

                if (!checkSubscription) {
                    return;
                }

                if (ctx.session.sendMessage) {
                    const result = await editMessageFromGetAnket(ctx);

                    if (!result) {
                        console.log('–û—à–∏–±–∫–∞ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!');
                    }
                }

                if (message.startsWith('/')) {
                    switch (message) {
                        case '/profile':
                            return ctx.scene.enter('profileScene');
                        case '/search':
                            ctx.session.sendMessage = 0
                            ctx.session.keyboard = true
                            return ctx.scene.enter('ancetScene');
                        case '/send':
                            ctx.session.exitGems = false
                            ctx.session.sendMessage = 0
                            return ctx.scene.enter('sendGems');
                        case '/likes':
                            return ctx.scene.enter('getLikes');
                        case '/metches':
                            ctx.session.sendMessage = 0;
                            ctx.session.count = 0;
                            return ctx.scene.enter('getMetch');
                        case '/reported':
                            return ctx.scene.enter('reportScene');
                        case '/nexySession':
                            ctx.reply(JSON.stringify(ctx.session));
                            return ctx.scene.leave();
                        case '/top':
                            ctx.session.sendMessage = 0
                            ctx.session.countTop = 1
                            return ctx.scene.enter('topScenes');
                        case '/shop':
                            ctx.session.exitGems = false;
                            return ctx.scene.enter("shopScene");
                        case '/case':
                            return ctx.scene.enter('caseScene');
                        case '/ref':
                            return ctx.scene.enter("referalScene");
                        case '/help':
                            await ctx.reply(
                                '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
                                'üîπ <b>/profile</b> - –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å\n' +
                                'üîπ <b>/search</b> - –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç\n' +
                                'üîπ <b>/likes</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –ª–∞–π–∫–æ–≤\n' +
                                'üîπ <b>/metches</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ç—á–µ–π\n' +
                                'üîπ <b>/top</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–ø–∞ —é–∑–µ—Ä–∞\n' +
                                'üîπ <b>/send</b> - –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–º–æ–≤\n' +
                                'üîπ <b>/shop</b> - –ú–∞–≥–∞–∑–∏–Ω\n' +
                                'üîπ <b>/case</b> - –ö–µ–π—Å—ã\n' +
                                'üîπ <b>/ref</b> - –†–µ—Ñ–µ—Ä–∞–ª–∫–∞\n' +
                                'üîπ <b>/help</b> - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥',
                                {
                                    parse_mode: 'HTML'
                                }
                            );
                            break;
                        case '/luchaevaMuda':
                            return ctx.scene.enter('adminScene');
                        case '/reported':
                            return ctx.scene.enter('reportScene');
                        case '/exitNexy':
                            try {
                                const url = process.env.URL;

                                const getUser = await axios.get(`${url}/users/${ctx.from?.id}`);

                                const user = getUser.data.message;

                                if (user.role !== 'admin') {
                                    await ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.');
                                    return
                                }

                                await ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –≤—Å–µ —Å–µ—Å—Å–∏–∏! –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–≤–æ–∞—Ç—å /clearNexySession –∏–ª–∏ /nexySession –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏–∏ —Å–µ—Å—Å–∏–∏')
                                return ctx.scene.leave();
                            } catch (err) {
                                if (err instanceof Error) {
                                    console.error(err.message);
                                } else {
                                    console.error(err);
                                }

                                await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —é–∑–µ—Ä–∞! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ–∑–µ —Ä–∞–∑');

                            }

                        default:
                            await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.');
                            break;
                    }
                    return;
                }

                switch (message) {
                    case 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
                        return ctx.scene.enter('profileScene');
                    case 'üîç –ü–æ–∏—Å–∫':
                        ctx.session.keyboard = true
                        ctx.session.sendMessage = 0
                        return ctx.scene.enter('ancetScene');
                    case '‚ù§Ô∏è –õ–∞–π–∫–∏':
                        return ctx.scene.enter('getLikes');
                    case 'üíå –ú–µ—Ç—á–∏':
                        ctx.session.count = 0;
                        ctx.session.sendMessage = 0;
                        return ctx.scene.enter('getMetch');
                    case 'ü•á –¢–æ–ø':
                        ctx.session.sendMessage = 0
                        ctx.session.countTop = 1
                        return ctx.scene.enter('topScenes');
                    case 'üì¶ –ö–µ–π—Å—ã':
                        return ctx.scene.enter('caseScene');
                    case 'üõí –ú–∞–≥–∞–∑–∏–Ω':
                        ctx.session.exitGems = false;
                        return ctx.scene.enter("shopScene");
                    case 'üîó –†–µ—Ñ–µ—Ä–∞–ª–∫–∞':
                        return ctx.scene.enter("referalScene");
                    case 'üí† –ì–µ–º—ã':
                        ctx.session.exitGems = false
                        ctx.session.sendMessage = 0
                        return ctx.scene.enter('sendGems');
                    default:
                        try {
                            console.log('message', message);
                            ctx.session.createAdvertisement.text = message;
                            await ctx.reply('–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å —Å–∫–∏–Ω—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–≥–∫ –∏–ª–∏ —Å–∞–π—Ç. –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–≥–∫ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –≤–∏–¥: https://t.me/@your_chanels');

                            return ctx.wizard.next();
                        } catch (err) {
                            console.error(err);
                            await ctx.reply('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø–æ—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å –∫–æ–Ω—Å–æ–ª—å');
                        }
                }
            }
        }
        return
    }

    if ('data' in ctx.callbackQuery) {
        const message = ctx.callbackQuery.data;

        switch (message) {
            case 'cancel':
                return ctx.scene.enter('adminScene');
            default:
                await ctx.reply(
                    '‚ö†Ô∏è <b>–¢—ã –Ω–∞–∂–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ!</b> –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑. üîÑ',
                    { parse_mode: 'HTML' }
                );
                break
        }
    }
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                const message = ctx.message?.text;

                const checkSubscription = await checkSubscriptionMiddleware(ctx)

                if (ctx.session.sendMessage) {
                    const result = await editMessageFromGetAnket(ctx);

                    if (!result) {
                        console.log('–û—à–∏–±–∫–∞ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!');
                    }
                }

                if (!checkSubscription) {
                    return;
                }

                if (message.startsWith('/')) {
                    switch (message) {
                        case '/profile':
                            return ctx.scene.enter('profileScene');
                        case '/search':
                            ctx.session.sendMessage = 0
                            ctx.session.keyboard = true
                            return ctx.scene.enter('ancetScene');
                        case '/send':
                            ctx.session.exitGems = false
                            ctx.session.sendMessage = 0
                            return ctx.scene.enter('sendGems');
                        case '/likes':
                            return ctx.scene.enter('getLikes');
                        case '/metches':
                            ctx.session.sendMessage = 0;
                            ctx.session.count = 0;
                            return ctx.scene.enter('getMetch');
                        case '/reported':
                            return ctx.scene.enter('reportScene');
                        case '/nexySession':
                            ctx.reply(JSON.stringify(ctx.session));
                            return ctx.scene.leave();
                        case '/top':
                            ctx.session.sendMessage = 0
                            ctx.session.countTop = 1
                            return ctx.scene.enter('topScenes');
                        case '/shop':
                            ctx.session.exitGems = false;
                            return ctx.scene.enter("shopScene");
                        case '/case':
                            return ctx.scene.enter('caseScene');
                        case '/ref':
                            return ctx.scene.enter("referalScene");
                        case '/help':
                            await ctx.reply(
                                '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
                                'üîπ <b>/profile</b> - –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å\n' +
                                'üîπ <b>/search</b> - –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç\n' +
                                'üîπ <b>/likes</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –ª–∞–π–∫–æ–≤\n' +
                                'üîπ <b>/metches</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ç—á–µ–π\n' +
                                'üîπ <b>/top</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–ø–∞ —é–∑–µ—Ä–∞\n' +
                                'üîπ <b>/send</b> - –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–º–æ–≤\n' +
                                'üîπ <b>/shop</b> - –ú–∞–≥–∞–∑–∏–Ω\n' +
                                'üîπ <b>/case</b> - –ö–µ–π—Å—ã\n' +
                                'üîπ <b>/ref</b> - –†–µ—Ñ–µ—Ä–∞–ª–∫–∞\n' +
                                'üîπ <b>/help</b> - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥',
                                {
                                    parse_mode: 'HTML'
                                }
                            );
                            break;
                        case '/luchaevaMuda':
                            return ctx.scene.enter('adminScene');
                        case '/reported':
                            return ctx.scene.enter('reportScene');
                        case '/exitNexy':
                            try {
                                const url = process.env.URL;

                                const getUser = await axios.get(`${url}/users/${ctx.from?.id}`);

                                const user = getUser.data.message;

                                if (user.role !== 'admin') {
                                    await ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.');
                                    return
                                }

                                await ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –≤—Å–µ —Å–µ—Å—Å–∏–∏! –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–≤–æ–∞—Ç—å /clearNexySession –∏–ª–∏ /nexySession –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏–∏ —Å–µ—Å—Å–∏–∏')
                                return ctx.scene.leave();
                            } catch (err) {
                                if (err instanceof Error) {
                                    console.error(err.message);
                                } else {
                                    console.error(err);
                                }

                                await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —é–∑–µ—Ä–∞! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ–∑–µ —Ä–∞–∑');

                            }

                        default:
                            await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.');
                            break;
                    }
                    return;
                }

                switch (message) {
                    case 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
                        return ctx.scene.enter('profileScene');
                    case 'üîç –ü–æ–∏—Å–∫':
                        ctx.session.keyboard = true
                        ctx.session.sendMessage = 0
                        return ctx.scene.enter('ancetScene');
                    case '‚ù§Ô∏è –õ–∞–π–∫–∏':
                        return ctx.scene.enter('getLikes');
                    case 'üíå –ú–µ—Ç—á–∏':
                        ctx.session.count = 0;
                        ctx.session.sendMessage = 0;
                        return ctx.scene.enter('getMetch');
                    case 'ü•á –¢–æ–ø':
                        ctx.session.sendMessage = 0
                        ctx.session.countTop = 1
                        return ctx.scene.enter('topScenes');
                    case 'üì¶ –ö–µ–π—Å—ã':
                        return ctx.scene.enter('caseScene');
                    case 'üõí –ú–∞–≥–∞–∑–∏–Ω':
                        ctx.session.exitGems = false;
                        return ctx.scene.enter("shopScene");
                    case 'üîó –†–µ—Ñ–µ—Ä–∞–ª–∫–∞':
                        return ctx.scene.enter("referalScene");
                    case 'üí† –ì–µ–º—ã':
                        ctx.session.exitGems = false
                        ctx.session.sendMessage = 0
                        return ctx.scene.enter('sendGems');
                    default:
                        try {
                            if (!isValidURL(message)) {
                                await ctx.reply('–í–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å—Å—ã–ª–∫–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É, –Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å http:// –∏–ª–∏ https://.');
                                return
                            }

                            ctx.session.createAdvertisement.link = message;
                            await ctx.reply('–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ä–µ–∫–ª–∞–º–∞.');

                            return ctx.wizard.next();
                        } catch (err) {
                            console.error(err);
                            await ctx.reply('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø–æ—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å –∫–æ–Ω—Å–æ–ª—å');
                        }
                }
            }
        }
        return
    }
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                const message = ctx.message?.text;

                const checkSubscription = await checkSubscriptionMiddleware(ctx)

                if (!checkSubscription) {
                    return;
                }

                if (ctx.session.sendMessage) {
                    const result = await editMessageFromGetAnket(ctx);

                    if (!result) {
                        console.log('–û—à–∏–±–∫–∞ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!');
                    }
                }

                if (message.startsWith('/')) {
                    switch (message) {
                        case '/profile':
                            return ctx.scene.enter('profileScene');
                        case '/search':
                            ctx.session.sendMessage = 0
                            ctx.session.keyboard = true
                            return ctx.scene.enter('ancetScene');
                        case '/send':
                            ctx.session.exitGems = false
                            ctx.session.sendMessage = 0
                            return ctx.scene.enter('sendGems');
                        case '/likes':
                            return ctx.scene.enter('getLikes');
                        case '/metches':
                            ctx.session.sendMessage = 0;
                            ctx.session.count = 0;
                            return ctx.scene.enter('getMetch');
                        case '/reported':
                            return ctx.scene.enter('reportScene');
                        case '/nexySession':
                            ctx.reply(JSON.stringify(ctx.session));
                            return ctx.scene.leave();
                        case '/top':
                            ctx.session.sendMessage = 0
                            ctx.session.countTop = 1
                            return ctx.scene.enter('topScenes');
                        case '/shop':
                            ctx.session.exitGems = false;
                            return ctx.scene.enter("shopScene");
                        case '/case':
                            return ctx.scene.enter('caseScene');
                        case '/ref':
                            return ctx.scene.enter("referalScene");
                        case '/help':
                            await ctx.reply(
                                '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
                                'üîπ <b>/profile</b> - –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å\n' +
                                'üîπ <b>/search</b> - –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç\n' +
                                'üîπ <b>/likes</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –ª–∞–π–∫–æ–≤\n' +
                                'üîπ <b>/metches</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ç—á–µ–π\n' +
                                'üîπ <b>/top</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–ø–∞ —é–∑–µ—Ä–∞\n' +
                                'üîπ <b>/send</b> - –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–º–æ–≤\n' +
                                'üîπ <b>/shop</b> - –ú–∞–≥–∞–∑–∏–Ω\n' +
                                'üîπ <b>/case</b> - –ö–µ–π—Å—ã\n' +
                                'üîπ <b>/ref</b> - –†–µ—Ñ–µ—Ä–∞–ª–∫–∞\n' +
                                'üîπ <b>/help</b> - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥',
                                {
                                    parse_mode: 'HTML'
                                }
                            );
                            break;
                        case '/luchaevaMuda':
                            return ctx.scene.enter('adminScene');
                        case '/reported':
                            return ctx.scene.enter('reportScene');
                        case '/exitNexy':
                            try {
                                const url = process.env.URL;

                                const getUser = await axios.get(`${url}/users/${ctx.from?.id}`);

                                const user = getUser.data.message;

                                if (user.role !== 'admin') {
                                    await ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.');
                                    return
                                }

                                await ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –≤—Å–µ —Å–µ—Å—Å–∏–∏! –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–≤–æ–∞—Ç—å /clearNexySession –∏–ª–∏ /nexySession –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏–∏ —Å–µ—Å—Å–∏–∏')
                                return ctx.scene.leave();
                            } catch (err) {
                                if (err instanceof Error) {
                                    console.error(err.message);
                                } else {
                                    console.error(err);
                                }

                                await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —é–∑–µ—Ä–∞! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ–∑–µ —Ä–∞–∑');

                            }

                        default:
                            await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.');
                            break;
                    }
                    return;
                }

                switch (message) {
                    case 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
                        return ctx.scene.enter('profileScene');
                    case 'üîç –ü–æ–∏—Å–∫':
                        ctx.session.keyboard = true
                        ctx.session.sendMessage = 0
                        return ctx.scene.enter('ancetScene');
                    case '‚ù§Ô∏è –õ–∞–π–∫–∏':
                        return ctx.scene.enter('getLikes');
                    case 'üíå –ú–µ—Ç—á–∏':
                        ctx.session.count = 0;
                        ctx.session.sendMessage = 0;
                        return ctx.scene.enter('getMetch');
                    case 'ü•á –¢–æ–ø':
                        ctx.session.sendMessage = 0
                        ctx.session.countTop = 1
                        return ctx.scene.enter('topScenes');
                    case 'üì¶ –ö–µ–π—Å—ã':
                        return ctx.scene.enter('caseScene');
                    case 'üõí –ú–∞–≥–∞–∑–∏–Ω':
                        ctx.session.exitGems = false;
                        return ctx.scene.enter("shopScene");
                    case 'üîó –†–µ—Ñ–µ—Ä–∞–ª–∫–∞':
                        return ctx.scene.enter("referalScene");
                    case 'üí† –ì–µ–º—ã':
                        ctx.session.exitGems = false
                        ctx.session.sendMessage = 0
                        return ctx.scene.enter('sendGems');
                    default:
                        try {
                            if (!(/^\d{1,2}$/.test(message) && Number(message) >= 0 && Number(message) <= 99)) {
                                await ctx.reply('–í—ã –¥–æ–ª–∂–Ω—ã –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
                                return
                            }

                            ctx.session.createAdvertisement.day = message;
                            await ctx.reply('–î–Ω–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å —Å–∫–∏–Ω—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤ —Ä–µ–∫–ª–∞–º–µ', {
                                reply_markup: {
                                    inline_keyboard: [
                                        [
                                            {
                                                text: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
                                                callback_data: 'cancel-photo'
                                            }
                                        ]
                                    ]
                                }
                            });

                            return ctx.wizard.next();
                        } catch (err) {
                            console.error(err);
                            await ctx.reply('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø–æ—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å –∫–æ–Ω—Å–æ–ª—å');
                        }
                }
            }
        }
        return
    }
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            } else if ("photo" in ctx.message) {
                const photo = ctx.message?.photo as PhotoSize[];

                console.log(photo[0].file_id);
                const fileId = photo[0].file_id

                ctx.session.createAdvertisement.photo = fileId;
                const text123 = ctx.session.createAdvertisement.text + `\n\n –°—Å—ã–ª–∫–∞: ${ctx.session.createAdvertisement.link}`;
                const text = formatText(text123);

                await ctx.reply('–£—Å–ø–µ—à–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ!');
                ctx.replyWithPhoto(ctx.session.createAdvertisement.photo || '', {
                    caption: text,
                    parse_mode: "HTML",
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
                                    callback_data: 'save_advertisement'
                                }
                            ],
                            [
                                {
                                    text: '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ',
                                    callback_data: 'again_advertisement'
                                }
                            ]
                        ]
                    }
                })

                return ctx.wizard.next();
            }

        }

        return
    }

    if ('data' in ctx.callbackQuery) {
        const message = ctx.callbackQuery.data;

        switch (message) {
            case 'cancel-photo':
                ctx.session.createAdvertisement.photo = '';

                const text123 = ctx.session.createAdvertisement.text + `\n\n –°—Å—ã–ª–∫–∞: ${ctx.session.createAdvertisement.link} \n\n –î–Ω–∏: ${ctx.session.createAdvertisement.day}`;
                const text = formatText(text123);

                await ctx.reply(text, {
                    parse_mode: "HTML",
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
                                    callback_data: 'save_advertisement'
                                }
                            ],
                            [
                                {
                                    text: '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ',
                                    callback_data: 'again_advertisement'
                                }
                            ]
                        ]
                    }
                })

                return ctx.wizard.next();
            default:
                await ctx.reply(
                    '‚ö†Ô∏è <b>–¢—ã –Ω–∞–∂–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ!</b> –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑. üîÑ',
                    { parse_mode: 'HTML' }
                );
                break
        }
    }
    return

}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    if ('data' in ctx.callbackQuery) {
        const message = ctx.callbackQuery.data;

        switch (message) {
            case 'save_advertisement':
                try {
                    const url = process.env.URL;
                    const req = await axios.post(`${url}/advertisement`, {
                        text: ctx.session.createAdvertisement.text,
                        photo: ctx.session.createAdvertisement.photo,
                        link: ctx.session.createAdvertisement.link,
                        day: ctx.session.createAdvertisement.day
                    });

                    if (req.status === 400) {
                        throw new Error(JSON.stringify(req.data.message));
                    }

                    await ctx.reply(`–£—Å–ø–µ—à–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã! –ê–π–¥–∏ —Ä–µ–∫–ª–∞–º—ã: ${req.data.message.id}`);

                    ctx.session.createAdvertisement = {};

                    return ctx.scene.enter('adminScene');
                } catch (err) {
                    if (err instanceof Error) {
                        console.error(err.message)
                    } else {
                        console.error(err)
                    }

                    await ctx.reply('–û—à–∏–±–∫–∞ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.');
                }

            case 'again_advertisement':
                ctx.session.createAdvertisement = {};

                return ctx.scene.enter('createAdvertisementScenes');

            default:
                await ctx.reply(
                    '‚ö†Ô∏è <b>–¢—ã –Ω–∞–∂–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ!</b> –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑. üîÑ',
                    { parse_mode: 'HTML' }
                );
                break
        }
    }
}
);

export const deleteAdvertisementScenes = new Scenes.WizardScene<MyContext>('deleteAdvertisementScenes', async (ctx) => {
    await ctx.reply('üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã</b>\n\n' +
        '–í–≤–µ–¥–∏—Ç–µ <b>ID</b> —Ä–µ–∫–ª–∞–º—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å. ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.',
        {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–í—ã–π—Ç–∏',
                            callback_data: 'cancel'
                        }
                    ]
                ]
            }
        }
    );

    return ctx.wizard.next();
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                const message = ctx.message?.text;

                const checkSubscription = await checkSubscriptionMiddleware(ctx)

                if (!checkSubscription) {
                    return;
                }

                if (ctx.session.sendMessage) {
                    const result = await editMessageFromGetAnket(ctx);

                    if (!result) {
                        console.log('–û—à–∏–±–∫–∞ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!');
                    }
                }

                if (message.startsWith('/')) {
                    switch (message) {
                        case '/profile':
                            return ctx.scene.enter('profileScene');
                        case '/search':
                            ctx.session.sendMessage = 0
                            ctx.session.keyboard = true
                            return ctx.scene.enter('ancetScene');
                        case '/send':
                            ctx.session.exitGems = false
                            ctx.session.sendMessage = 0
                            return ctx.scene.enter('sendGems');
                        case '/likes':
                            return ctx.scene.enter('getLikes');
                        case '/metches':
                            ctx.session.sendMessage = 0;
                            ctx.session.count = 0;
                            return ctx.scene.enter('getMetch');
                        case '/reported':
                            return ctx.scene.enter('reportScene');
                        case '/nexySession':
                            ctx.reply(JSON.stringify(ctx.session));
                            return ctx.scene.leave();
                        case '/top':
                            ctx.session.sendMessage = 0
                            ctx.session.countTop = 1
                            return ctx.scene.enter('topScenes');
                        case '/shop':
                            ctx.session.exitGems = false;
                            return ctx.scene.enter("shopScene");
                        case '/case':
                            return ctx.scene.enter('caseScene');
                        case '/ref':
                            return ctx.scene.enter("referalScene");
                        case '/help':
                            await ctx.reply(
                                '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
                                'üîπ <b>/profile</b> - –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å\n' +
                                'üîπ <b>/search</b> - –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç\n' +
                                'üîπ <b>/likes</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –ª–∞–π–∫–æ–≤\n' +
                                'üîπ <b>/metches</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ç—á–µ–π\n' +
                                'üîπ <b>/top</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–ø–∞ —é–∑–µ—Ä–∞\n' +
                                'üîπ <b>/send</b> - –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–º–æ–≤\n' +
                                'üîπ <b>/shop</b> - –ú–∞–≥–∞–∑–∏–Ω\n' +
                                'üîπ <b>/case</b> - –ö–µ–π—Å—ã\n' +
                                'üîπ <b>/ref</b> - –†–µ—Ñ–µ—Ä–∞–ª–∫–∞\n' +
                                'üîπ <b>/help</b> - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥',
                                {
                                    parse_mode: 'HTML'
                                }
                            );
                            break;
                        case '/luchaevaMuda':
                            return ctx.scene.enter('adminScene');
                        case '/reported':
                            return ctx.scene.enter('reportScene');
                        case '/exitNexy':
                            try {
                                const url = process.env.URL;

                                const getUser = await axios.get(`${url}/users/${ctx.from?.id}`);

                                const user = getUser.data.message;

                                if (user.role !== 'admin') {
                                    await ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.');
                                    return
                                }

                                await ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –≤—Å–µ —Å–µ—Å—Å–∏–∏! –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–≤–æ–∞—Ç—å /clearNexySession –∏–ª–∏ /nexySession –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏–∏ —Å–µ—Å—Å–∏–∏')
                                return ctx.scene.leave();
                            } catch (err) {
                                if (err instanceof Error) {
                                    console.error(err.message);
                                } else {
                                    console.error(err);
                                }

                                await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —é–∑–µ—Ä–∞! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ–∑–µ —Ä–∞–∑');

                            }

                        default:
                            await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.');
                            break;
                    }
                    return;
                }

                switch (message) {
                    case 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
                        return ctx.scene.enter('profileScene');
                    case 'üîç –ü–æ–∏—Å–∫':
                        ctx.session.keyboard = true
                        ctx.session.sendMessage = 0
                        return ctx.scene.enter('ancetScene');
                    case '‚ù§Ô∏è –õ–∞–π–∫–∏':
                        return ctx.scene.enter('getLikes');
                    case 'üíå –ú–µ—Ç—á–∏':
                        ctx.session.count = 0;
                        ctx.session.sendMessage = 0;
                        return ctx.scene.enter('getMetch');
                    case 'ü•á –¢–æ–ø':
                        ctx.session.sendMessage = 0
                        ctx.session.countTop = 1
                        return ctx.scene.enter('topScenes');
                    case 'üì¶ –ö–µ–π—Å—ã':
                        return ctx.scene.enter('caseScene');
                    case 'üõí –ú–∞–≥–∞–∑–∏–Ω':
                        ctx.session.exitGems = false;
                        return ctx.scene.enter("shopScene");
                    case 'üîó –†–µ—Ñ–µ—Ä–∞–ª–∫–∞':
                        return ctx.scene.enter("referalScene");
                    case 'üí† –ì–µ–º—ã':
                        ctx.session.exitGems = false
                        ctx.session.sendMessage = 0
                        return ctx.scene.enter('sendGems');
                    default:
                        if (!(/^\d+$/.test(message) && Number(message))) {
                            await ctx.reply('–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ!');
                            return
                        }

                        try {
                            const url = process.env.URL;
                            const req = await axios.delete(`${url}/advertisement/${message}`, {
                                validateStatus: () => true
                            });

                            if (req.status === 400) {
                                throw new Error(req.data ? JSON.stringify(req.data) : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                            }

                            await ctx.reply('–£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –∏–∑ –ª–µ–Ω—Ç—ã!');

                            return ctx.scene.enter('adminScene')
                        } catch (err) {
                            if (err instanceof Error) {
                                console.error('err:', err.message);
                            } else {
                                console.error(err);
                            }

                            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', {
                                reply_markup: {
                                    inline_keyboard: [
                                        [
                                            {
                                                text: '–í—ã–π—Ç–∏',
                                                callback_data: 'cancel'
                                            }
                                        ]
                                    ]
                                }
                            })
                        }

                        return;
                }
            }
        }
        return
    }

    if ('data' in ctx.callbackQuery) {
        const message = ctx.callbackQuery.data;

        switch (message) {
            case 'cancel':
                return ctx.scene.enter('adminScene');
            default:
                await ctx.reply(
                    '‚ö†Ô∏è <b>–¢—ã –Ω–∞–∂–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ!</b> –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑. üîÑ',
                    { parse_mode: 'HTML' }
                );
                break
        }
    }
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    if ('data' in ctx.callbackQuery) {
        const message = ctx.callbackQuery.data;

        switch (message) {
            case 'cancel':
                return ctx.scene.enter('adminScene');
            default:
                await ctx.reply(
                    '‚ö†Ô∏è <b>–¢—ã –Ω–∞–∂–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ!</b> –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑. üîÑ',
                    { parse_mode: 'HTML' }
                );
                break
        }
    }
});

export const getAdvertisementScenes = new Scenes.WizardScene<MyContext>('getAdvertisementScenes', async (ctx) => {
    try {
        const url = process.env.URL;

        const req = await axios.get(`${url}/advertisement/`, {
            validateStatus: () => true
        });

        if (req.status === 400) {
            throw new Error(JSON.stringify(req.data.message));
        }

        const formattedText = req.data.message
            .map((ad: any) => `üìå <b>${ad.id}</b> ‚Äî ${ad.text.replace(/<\/?[^>]+(>|$)/g, "").substring(0, 30)}...`)
            .join("\n");

        await ctx.reply(`<b>üì¢ –î–æ—Å—Ç—É–ø–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞ –≤ –ª–µ–Ω—Ç–µ –ø–æ–∏—Å–∫–∞:</b>\n\n${formattedText}`, {
            parse_mode: "HTML",
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–í—ã–π—Ç–∏',
                            callback_data: 'cancel'
                        }
                    ]
                ]
            }
        });


    } catch (err) {
        if (err instanceof Error) {
            console.error('err:', err.message);
        } else {
            console.error(err);
        }

        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–í—ã–π—Ç–∏',
                            callback_data: 'cancel'
                        }
                    ]
                ]
            }
        });
    }

    return ctx.wizard.next();
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    if ('data' in ctx.callbackQuery) {
        const message = ctx.callbackQuery.data;

        switch (message) {
            case 'cancel':
                return ctx.scene.enter('adminScene');
            default:
                await ctx.reply(
                    '‚ö†Ô∏è <b>–¢—ã –Ω–∞–∂–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ!</b> –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑. üîÑ',
                    { parse_mode: 'HTML' }
                );
                break
        }
    }
});

function isValidURL(text: string): boolean {
    const urlRegex = /^(https?:\/\/)?([a-z0-9-]+\.)+[a-z]{2,6}(\/[^\s]*)?$/i;
    return urlRegex.test(text);
}