import { MyContext } from '../interfaces/state';
import { Scenes } from "telegraf";
import axios from "axios";
import { redis } from '..';

export const ReportScene = new Scenes.WizardScene<MyContext>('reportScene', async (ctx) => {
    try {
        const url = process.env.URL;

        const userData1 = await redis.hgetall(`user-${ctx.from?.id}`);

        if (Object.keys(userData1).length === 0) {
            const req = await axios.get(`${url}/users/${ctx.from?.id}`);

            if (req.status === 400) {
                throw new Error(req.data.message);
            }

            const user = req.data.message;

            await redis.hset(`user-${ctx.from?.id}`, {
                name: user.name,
                description: user.description,
                photo: user.photo,
                city: user.city,
                age: user.age.toString(),
                minAge: user.minAge.toString(),
                maxAge: user.maxAge.toString(),
                likeWieved: user.likeWieved ? '1' : '0',
                dislikeWieved: user.dislikeWieved ? '1' : '0',
                coinWieved: user.coinWieved ? '1' : '0',
                premium: user.premium ? '1' : '0',
                role: user.role
            });
        }

        const interactions = await redis.hgetall(`user-${ctx.from?.id}`);

        console.log('–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ 1');
        console.log('interactions', interactions);


        
        if (interactions.role !== 'admin') {
            await ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.');
            return ctx.scene.leave();
        }

        const llen = await redis.llen(`rep-hash-${ctx.from?.id}`);

        console.log("llen from if", llen);

        if (llen === 0) {
            const req = await axios.get(`${url}/report`);

            if (req.status === 400) {
                throw new Error(JSON.stringify(req.data.message));
            }
            if (typeof (req.data.message) === 'string') {
                await ctx.reply(req.data.message);
                return ctx.scene.leave();
            } else {
                await redis.lpush(`rep-hash-${ctx.from?.id}`, ...req.data?.message);
                console.log('–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ 2')
            }
        }

        const tasks = await redis.lrange(`rep-hash-${ctx.from?.id}`, 0, -1);
        console.log('tasks', tasks);
        const userId = tasks[0];

        const req = await axios.get(`${url}/users/${userId}`);

        if (req.status === 400) {
            throw new Error(JSON.stringify(req.data.message));
        }

        const user = req.data.message;

        await ctx.replyWithPhoto(user.photo, {
            caption: `<b>üë§ –ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\nüÜî ID: ${user.id}\nüìç –ì–æ—Ä–æ–¥: ${user.city}\nüìÖ –í–æ–∑—Ä–∞—Å—Ç: ${user.age}\nüí¨ –û–ø–∏—Å–∞–Ω–∏–µ: ${user.description}`,
            parse_mode: "HTML",
            reply_markup: {
                inline_keyboard: [
                    [{ text: "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data: `ban` }],
                    [{ text: "‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å", callback_data: `approve` }]
                ]
            }
        });

        return ctx.wizard.next();
    } catch (err) {
        if (err instanceof Error) {
            console.error(err.message);
        } else {
            console.error(err)
        }
        await ctx.reply('–û—à–∏–±–∫–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ö–µ—à–∞ —é–∑–µ—Ä–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.');
        return ctx.scene.leave();
    }

}, async (ctx) => {
    const url = process.env.URL;
    if (ctx.callbackQuery !== undefined) {
        if ("data" in ctx.callbackQuery) {
            const tasks = await redis.lrange(`rep-hash-${ctx.from?.id}`, 0, -1);
            const userId = tasks[0];

            if (ctx.callbackQuery.data === 'ban') {
                try {
                    const req = await axios.post(`${url}/report/${userId}/banned`);

                    if (req.status === 400) {
                        throw new Error(JSON.stringify(req.data.message));
                    }

                    ctx.reply(`<b>–Æ–∑–µ—Ä ${userId}</b> —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω! üéâ\n–¢–µ–ø–µ—Ä—å –æ–Ω –Ω–µ —Å–º–æ–∂–µ—Ç –±–æ–ª—å—à–µ –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞. üö´`, {
                        parse_mode: 'HTML'
                    });

                    await redis.lpop(`rep-hash-${ctx.from?.id}`);

                    return ctx.scene.enter('reportScene');
                } catch (err) {
                    console.error(err);
                    if (err instanceof Error) {
                        console.error(err.message);
                    }
                    ctx.reply(`${err instanceof Error ? err.message : 'Please, check console'}`);
                    return ctx.scene.leave();
                }
            } else if (ctx.callbackQuery.data === 'approve') {
                try {
                    const req = await axios.post(`${url}/report/${userId}/leave`);

                    if (req.status === 400) {
                        throw new Error(JSON.stringify(req.data.message));
                    }

                    ctx.reply('<b>–° —é–∑–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ –≤—Å–µ –æ–±–≤–∏–Ω–µ–Ω–∏—è</b> ‚úÖ', {
                        parse_mode: 'HTML'
                    });

                    await redis.lpop(`rep-hash-${ctx.from?.id}`);

                    return ctx.scene.enter('reportScene');
                } catch (err) {
                    if (err instanceof Error) {
                        console.error(err.message);
                    }
                    ctx.reply(`${err instanceof Error ? err.message : 'Please, check console'}`);
                    return ctx.scene.leave();
                }
            }
        }
    }
});

