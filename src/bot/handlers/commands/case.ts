import { editMessageOnlyText } from './../search/getAnket';
import axios from 'axios';
import { MyContext } from './../../interfaces/state';
import { Scenes } from "telegraf";
import { redis } from '../..';
import { handleCommand1 } from './handle';

async function updateUserCases(ctx: any) {
    const url = process.env.URL;

    const dataCaseCheck = await redis.hgetall(`case-${ctx.from?.id}`);

    if (Object.keys(dataCaseCheck).length === 0) {
        try {
            const req = await axios.get(`${url}/users/${ctx.from?.id}`);

            if (req.status === 400) {
                throw new Error(`–û—à–∏–±–∫–∞: ${JSON.stringify(req.data.message)}`);
            }

            const user = req.data.message;

            await redis.hset(`case-${ctx.from?.id}`, {
                caseBronza: user.caseBronza,
                caseSilver: user.caseSilver,
                caseGold: user.caseGold,
                casePlatinum: user.casePlatinum,
                caseMystery: user.caseMystery,
                caseEveryDay: user.caseEveryDay,
            });

        } catch (err) {
            if (err instanceof Error) {
                console.error(err.message);
            }
            ctx.reply('–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–µ–π—Å–µ! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑');
        }

        await redis.expire(`case-${ctx.from?.id}`, 600);
    }
}

function getRandomInRange(min: number, max: number) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

async function updateUserScore(count: number, id: number) {
    try {
        const url = process.env.URL;

        const req = await axios.put(`${url}/users/${id}/gems`, {
            count: count,
            action: "increment"
        });

        if (req.status === 400) {
            throw new Error(JSON.stringify(req.data.message));
        }

        return true
    } catch (err) {
        console.error(err);
        return false
    }
}

async function updateCase(caseType: string, action: "increment" | "decrement", id: number) {
    try {
        const url = process.env.URL;

        const req = await axios.put(`${url}/users/${id}/case`, {
            caseType: caseType,
            action: action
        });

        if (req.status === 400) {
            throw new Error(JSON.stringify(req.data.message));
        }

        return true
    } catch (err) {
        console.error(err);
        return false
    }
}

async function byeCase(caseType: string, id: number, price: number) {
    try {
        const url = process.env.URL;

        const reqGems = await axios.put(`${url}/users/${id}/gems`, {
            count: price,
            action: "decrement"
        }, {
            validateStatus: (status) => status < 500
        });

        if (reqGems.status === 400) {
            throw new Error('‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }

        const updateCaseBye = await updateCase(caseType, "increment", id);

        if (!updateCaseBye) {
            throw new Error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–µ–π—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }

        return { status: true, message: 'üéâ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é –∫–µ–π—Å–∞ –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ.' };
    } catch (err) {
        console.error(err);

        if (err instanceof Error) {
            return { status: false, message: `${err.message}` };
        }

        return { status: false, message: '‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.' };
    }
}

function getRandomCase(): string {
    const random = Math.random() * 100;

    if (random < 45) return "caseBronza";
    if (random < 80) return "caseSilver";
    if (random < 95) return "caseGold";
    return "casePlatinum";
}

function getRandomCaseEveryDayDefault(): string {
    const random = Math.random() * 100;

    if (random < 55) return "caseBronza";
    if (random < 90) return "caseSilver";
    return "caseGold";
}

function getRandomCaseEveryDayPremium(): string {
    const random = Math.random() * 100;

    if (random < 45) return "caseSilver";
    if (random < 75) return "caseGold";
    return "casePlatinum";
}

export const caseBronzaScene = new Scenes.WizardScene<MyContext>('caseBronzaScene', async (ctx) => {

    await updateUserCases(ctx);

    const dataCase = await redis.hgetall(`case-${ctx.from?.id}`);

    if (dataCase.caseBronza === '0') {
        const editMessage = await editMessageOnlyText(ctx,
            `<b>‚ùå –£ –≤–∞—Å –Ω–µ—Ç –±—Ä–æ–Ω–∑–æ–≤—ã—Ö –∫–µ–π—Å–æ–≤!</b>\n\n` +
            `–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω –∏ <b>–ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ</b> –±—Ä–æ–Ω–∑–æ–≤—ã–π –∫–µ–π—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —à–∞–Ω—Å –Ω–∞ –≤—ã–∏–≥—Ä—ã—à! üí†\n\n` +
            `üì¶ <i>–ö–µ–π—Å –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.</i>`, {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–ú–∞–≥–∞–∑–∏–Ω –∫–µ–π—Å–æ–≤',
                            callback_data: 'shop-case'
                        }
                    ]
                ]
            }
        });

        if (!editMessage) {
            await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            return
        }

        return ctx.wizard.next();
    }

    const caseText = dataCase.caseBronza === '1' ? '–∫–µ–π—Å' : '–∫–µ–π—Å–∞';

    const editMessage = await editMessageOnlyText(ctx,
        `<b>üì¶ –£ –≤–∞—Å –µ—Å—Ç—å ${dataCase.caseBronza} ${caseText} (–ë—Ä–æ–Ω–∑–∞)!</b>\n\n` +
        `–í –Ω–µ–º –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç <b>500 –¥–æ 1000</b>! üí† \n\n` +
        '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–∞—à –∫–µ–π—Å.', {
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: 'üóù –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å',
                        callback_data: 'open-case'
                    }
                ]
            ]
        }
    });

    if (!editMessage) {
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        return
    }

    return ctx.wizard.next();
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    if ("data" in ctx.callbackQuery) {
        const dataCalback = ctx.callbackQuery.data;


        switch (dataCalback) {
            case 'shop-case':
                await ctx.scene.enter('caseShopScene')
                break
            case 'open-case':
                try {
                    const randomNumber = getRandomInRange(500, 1000);

                    const boolScore = await updateUserScore(randomNumber, ctx.from?.id || 0);

                    if (!boolScore) {
                        throw new Error('–û—à–∏–±–∫–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç–∞!');
                    }

                    const boolCase = await updateCase('caseBronza', "decrement", ctx.from?.id || 0)

                    if (!boolCase) {
                        throw new Error('–û—à–∏–±–∫–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–µ–π—Å–∞!');
                    }

                    const editMessage = await editMessageOnlyText(ctx,
                        `<b>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n–¢—ã –≤—ã–∏–≥—Ä–∞–ª <b>${randomNumber} –≥–µ–º–æ–≤</b>! üí†\n\n–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∫–µ–π—Å—ã –∏ –æ—Ç–∫—Ä—ã—Ç—å –∏—Ö!`, {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {
                                        text: '–ö–µ–π—Å—ã',
                                        callback_data: 'case'
                                    }
                                ]
                            ]
                        }
                    });

                    if (!editMessage) {
                        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                        return
                    }

                    return ctx.wizard.next();

                } catch (err) {
                    if (err instanceof Error) {
                        console.error(err.message);
                    } else {
                        console.error(err)
                    }
                    ctx.reply('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
                }
                break
        }
    }
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    if ("data" in ctx.callbackQuery) {
        const dataCalback = ctx.callbackQuery.data;
        if (dataCalback === 'case') {
            ctx.session.exitGems = true;
            await ctx.scene.enter('caseScene')
        } else {
            await ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!')
        }

    }
});

export const caseEveryDayScene = new Scenes.WizardScene<MyContext>('caseEveryDayScene', async (ctx) => {
    await updateUserCases(ctx);

    const dataCase = await redis.hgetall(`case-${ctx.from?.id}`);

    if (dataCase.caseEveryDay === '0') {
        const editMessage = await editMessageOnlyText(ctx,
            `<b>‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–µ–π—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!</b>\n\n` +
            `–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å <b>–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–µ–π—Å</b> –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n` +
            `–õ–∏–±–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω –∏ <b>–ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ</b> –∫–µ–π—Å—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —à–∞–Ω—Å –Ω–∞ –≤—ã–∏–≥—Ä—ã—à! üí†\n\n` +
            `üì¶ <i>–ö–µ–π—Å –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.</i>`, {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–ú–∞–≥–∞–∑–∏–Ω –∫–µ–π—Å–æ–≤',
                            callback_data: 'shop-case'
                        }
                    ]
                ]
            }
        }
        );

        if (!editMessage) {
            await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            return;
        }

        return ctx.wizard.next();
    }

    const editMessage = await editMessageOnlyText(ctx,
        `<b>üì¶ –£ –≤–∞—Å –µ—Å—Ç—å 1 –∫–µ–π—Å (–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π)!</b>\n\n` +
        `–û—Ç–∫—Ä—ã–≤ –µ–≥–æ, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–µ–π—Å–æ–≤:\n\n` +
        `<b>üíò –û–±—ã—á–Ω—ã–µ —à–∞–Ω—Å—ã:</b>\n` +
        `- –ë—Ä–æ–Ω–∑–æ–≤—ã–π (55%)\n` +
        `- –°–µ—Ä–µ–±—Ä—è–Ω—ã–π (35%)\n` +
        `- –ó–æ–ª–æ—Ç–æ–π (10%)\n\n` +
        `<b>‚≠ê –®–∞–Ω—Å—ã —Å –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø–æ–º:</b>\n` +
        `- –°–µ—Ä–µ–±—Ä—è–Ω—ã–π (45%)\n` +
        `- –ó–æ–ª–æ—Ç–æ–π (30%)\n` +
        `- –ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π (25%)\n\n` +
        `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–∞—à –∫–µ–π—Å.`, {
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: 'üóù –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å',
                        callback_data: 'open-case'
                    }
                ]
            ]
        }
    }
    );

    if (!editMessage) {
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        return;
    }

    return ctx.wizard.next();
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    if ("data" in ctx.callbackQuery) {
        const dataCalback = ctx.callbackQuery.data;


        switch (dataCalback) {
            case 'shop-case':
                await ctx.scene.enter('caseShopScene')
                break
            case 'open-case':
                try {

                    const userData1 = await redis.hgetall(`user-${ctx.from?.id}`);

                    if (Object.keys(userData1).length === 0) {
                        const url = process.env.URL;

                        const req = await axios.get(`${url}/users/${ctx.from?.id}`);

                        if (req.status === 400) {
                            throw new Error(`–û—à–∏–±–∫–∞: ${JSON.stringify(req.data.message)}`);
                        }

                        const user = req.data.message;

                        await redis.hset(`user-${ctx.from?.id}`, {
                            name: user.name,
                            description: user.description,
                            photo: user.photo,
                            city: user.city,
                            age: user.age.toString(),
                            minAge: user.minAge.toString(),
                            maxAge: user.maxAge.toString(),
                            likeWieved: user.likeWieved ? '1' : '0',
                            dislikeWieved: user.dislikeWieved ? '1' : '0',
                            coinWieved: user.coinWieved ? '1' : '0',
                            premium: user.premium ? '1' : '0',
                            role: user.role
                        });
                    }

                    const userData = await redis.hget(`user-${ctx.from?.id}`, 'premium');

                    let randomCase;

                    if (userData === '1') {
                        randomCase = getRandomCaseEveryDayPremium();
                    } else {
                        randomCase = getRandomCaseEveryDayDefault();
                    }

                    const boolCaseEveryDay = await updateCase('caseEveryDay', "decrement", ctx.from?.id || 0)

                    if (!boolCaseEveryDay) {
                        throw new Error('–û—à–∏–±–∫–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–µ–π—Å–∞!');
                    }

                    const boolCase = await updateCase(randomCase, "increment", ctx.from?.id || 0)

                    if (!boolCase) {
                        throw new Error('–û—à–∏–±–∫–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–µ–π—Å–∞!');
                    }

                    let caseName = '';

                    switch (randomCase) {
                        case 'caseBronza':
                            caseName = '–±—Ä–æ–Ω–∑–æ–≤—ã–π'
                            break
                        case 'caseSilver':
                            caseName = '—Å–µ—Ä–µ–±—Ä—è–Ω–Ω—ã–π'
                            break
                        case 'caseGold':
                            caseName = '–∑–æ–ª–æ—Ç–æ–π'
                            break
                        case 'casePlatinum':
                            caseName = '–ø–ª–∞—Ç–∏–Ω–æ–≤—ã–π'
                            break
                        default:
                            break
                    }

                    const editMessage = await editMessageOnlyText(ctx,
                        `<b>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n–¢—ã –≤—ã–∏–≥—Ä–∞–ª <b>${caseName} –∫–µ–π—Å</b>! üì¶\n\n–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∫–µ–π—Å—ã –∏ –æ—Ç–∫—Ä—ã—Ç—å –∏—Ö!`, {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {
                                        text: '–ö–µ–π—Å—ã',
                                        callback_data: 'case'
                                    }
                                ]
                            ]
                        }
                    });

                    if (!editMessage) {
                        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                        return
                    }

                    return ctx.wizard.next();
                } catch (err) {
                    if (err instanceof Error) {
                        console.error(err.message);
                    } else {
                        console.error(err)
                    }
                    ctx.reply('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
                }
                break
        }
    }
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    if ("data" in ctx.callbackQuery) {
        const dataCalback = ctx.callbackQuery.data;
        if (dataCalback === 'case') {
            ctx.session.exitGems = true;
            await ctx.scene.enter('caseScene')
        } else {
            await ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!')
        }

    }
});

export const caseSilverScene = new Scenes.WizardScene<MyContext>('caseSilverScene', async (ctx) => {
    await updateUserCases(ctx);

    const dataCase = await redis.hgetall(`case-${ctx.from?.id}`);

    if (dataCase.caseSilver === '0') {
        const editMessage = await editMessageOnlyText(ctx,
            `<b>‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–µ—Ä–µ–±—Ä—è–Ω—ã—Ö –∫–µ–π—Å–æ–≤!</b>\n\n` +
            `–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω –∏ <b>–ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ</b> —Å–µ—Ä–µ–±—Ä—è–Ω—ã–π –∫–µ–π—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —à–∞–Ω—Å –Ω–∞ –≤—ã–∏–≥—Ä—ã—à! üí†\n\n` +
            `üì¶ <i>–ö–µ–π—Å –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.</i>`, {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–ú–∞–≥–∞–∑–∏–Ω –∫–µ–π—Å–æ–≤',
                            callback_data: 'shop-case'
                        }
                    ]
                ]
            }
        });

        if (!editMessage) {
            await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            return;
        }

        return ctx.wizard.next();
    }

    const caseText = dataCase.caseSilver === '1' ? '–∫–µ–π—Å' : '–∫–µ–π—Å–∞';

    const editMessage = await editMessageOnlyText(ctx,
        `<b>üì¶ –£ –≤–∞—Å –µ—Å—Ç—å ${dataCase.caseSilver} ${caseText} (–°–µ—Ä–µ–±—Ä–æ)!</b>\n\n` +
        `–í –Ω–µ–º –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç <b>1000 –¥–æ 2500</b>! üí†\n\n` +
        '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–∞—à –∫–µ–π—Å.', {
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: 'üóù –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å',
                        callback_data: 'open-case'
                    }
                ]
            ]
        }
    });

    if (!editMessage) {
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        return;
    }

    return ctx.wizard.next();
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    if ("data" in ctx.callbackQuery) {
        const dataCalback = ctx.callbackQuery.data;


        switch (dataCalback) {
            case 'shop-case':
                await ctx.scene.enter('caseShopScene')
                break
            case 'open-case':
                try {
                    const randomNumber = getRandomInRange(1000, 2500);

                    const boolScore = await updateUserScore(randomNumber, ctx.from?.id || 0);

                    if (!boolScore) {
                        throw new Error('–û—à–∏–±–∫–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç–∞!');
                    }

                    const boolCase = await updateCase('caseSilver', "decrement", ctx.from?.id || 0)

                    if (!boolCase) {
                        throw new Error('–û—à–∏–±–∫–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–µ–π—Å–∞!');
                    }

                    const editMessage = await editMessageOnlyText(ctx,
                        `<b>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n–¢—ã –≤—ã–∏–≥—Ä–∞–ª <b>${randomNumber} –≥–µ–º–æ–≤</b>! üí†\n\n–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∫–µ–π—Å—ã –∏ –æ—Ç–∫—Ä—ã—Ç—å –∏—Ö!`, {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {
                                        text: '–ö–µ–π—Å—ã',
                                        callback_data: 'case'
                                    }
                                ]
                            ]
                        }
                    });

                    if (!editMessage) {
                        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                        return
                    }

                    return ctx.wizard.next();
                } catch (err) {
                    if (err instanceof Error) {
                        console.error(err.message);
                    } else {
                        console.error(err)
                    }
                    ctx.reply('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
                }
                break
        }
    }
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    if ("data" in ctx.callbackQuery) {
        const dataCalback = ctx.callbackQuery.data;
        if (dataCalback === 'case') {
            ctx.session.exitGems = true;
            await ctx.scene.enter('caseScene')
        } else {
            await ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!')
        }

    }
});

export const caseGoldScene = new Scenes.WizardScene<MyContext>('caseGoldScene', async (ctx) => {
    await updateUserCases(ctx);

    const dataCase = await redis.hgetall(`case-${ctx.from?.id}`);

    if (dataCase.caseGold === '0') {
        const editMessage = await editMessageOnlyText(ctx,
            `<b>‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–æ–ª–æ—Ç—ã—Ö –∫–µ–π—Å–æ–≤!</b>\n\n` +
            `–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω –∏ <b>–ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ</b> –∑–æ–ª–æ—Ç–æ–π –∫–µ–π—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —à–∞–Ω—Å –Ω–∞ –≤—ã–∏–≥—Ä—ã—à! üí†\n\n` +
            `üì¶ <i>–ö–µ–π—Å –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.</i>`, {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–ú–∞–≥–∞–∑–∏–Ω –∫–µ–π—Å–æ–≤',
                            callback_data: 'shop-case'
                        }
                    ]
                ]
            }
        });

        if (!editMessage) {
            await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            return;
        }

        return ctx.wizard.next();
    }

    const caseText = dataCase.caseGold === '1' ? '–∫–µ–π—Å' : '–∫–µ–π—Å–∞';

    const editMessage = await editMessageOnlyText(ctx,
        `<b>üì¶ –£ –≤–∞—Å –µ—Å—Ç—å ${dataCase.caseGold} ${caseText} (–ó–æ–ª–æ—Ç–æ)!</b>\n\n` +
        `–í –Ω–µ–º –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç <b>2500 –¥–æ 5000</b>! üí†\n\n` +
        '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–∞—à –∫–µ–π—Å.', {
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: 'üóù –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å',
                        callback_data: 'open-case'
                    }
                ]
            ]
        }
    });

    if (!editMessage) {
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        return;
    }

    return ctx.wizard.next();
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    if ("data" in ctx.callbackQuery) {
        const dataCalback = ctx.callbackQuery.data;


        switch (dataCalback) {
            case 'shop-case':
                await ctx.scene.enter('caseShopScene')
                break
            case 'open-case':
                try {
                    const randomNumber = getRandomInRange(2500, 5000);

                    const boolScore = await updateUserScore(randomNumber, ctx.from?.id || 0);

                    if (!boolScore) {
                        throw new Error('–û—à–∏–±–∫–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç–∞!');
                    }

                    const boolCase = await updateCase('caseGold', "decrement", ctx.from?.id || 0)

                    if (!boolCase) {
                        throw new Error('–û—à–∏–±–∫–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–µ–π—Å–∞!');
                    }

                    const editMessage = await editMessageOnlyText(ctx,
                        `<b>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n–¢—ã –≤—ã–∏–≥—Ä–∞–ª <b>${randomNumber} –≥–µ–º–æ–≤</b>! üí†\n\n–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∫–µ–π—Å—ã –∏ –æ—Ç–∫—Ä—ã—Ç—å –∏—Ö!`, {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {
                                        text: '–ö–µ–π—Å—ã',
                                        callback_data: 'case'
                                    }
                                ]
                            ]
                        }
                    });

                    if (!editMessage) {
                        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                        return
                    }

                    return ctx.wizard.next();
                } catch (err) {
                    if (err instanceof Error) {
                        console.error(err.message);
                    } else {
                        console.error(err)
                    }
                    ctx.reply('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
                    return
                }
                break
        }
    }
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    if ("data" in ctx.callbackQuery) {
        const dataCalback = ctx.callbackQuery.data;
        if (dataCalback === 'case') {
            ctx.session.exitGems = true;
            await ctx.scene.enter('caseScene')
        } else {
            await ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!')
        }

    }
});

export const casePlatinumScene = new Scenes.WizardScene<MyContext>('casePlatinumScene', async (ctx) => {
    await updateUserCases(ctx);

    const dataCase = await redis.hgetall(`case-${ctx.from?.id}`);

    if (dataCase.casePlatinum === '0') {
        const editMessage = await editMessageOnlyText(ctx,
            `<b>‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–ª–∞—Ç–∏–Ω–æ–≤—ã—Ö –∫–µ–π—Å–æ–≤!</b>\n\n` +
            `–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —ç—Ç–æ—Ç –∫–µ–π—Å <b>—Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º —à–∞–Ω—Å–æ–º</b> –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏–ª–∏ –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ <b>–º–∏—Å—Ç–∏—á–µ—Å–∫–æ–º –∫–µ–π—Å–µ</b>.\n\n` +
            `üì¶ <i>–ò—Å–ø—ã—Ç–∞–π—Ç–µ —É–¥–∞—á—É, –æ—Ç–∫—Ä—ã–≤–∞—è –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–µ–π—Å—ã, –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ —Å–≤–æ–π —à–∞–Ω—Å!</i>`, {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–ú–∞–≥–∞–∑–∏–Ω –∫–µ–π—Å–æ–≤',
                            callback_data: 'shop-case'
                        }
                    ]
                ]
            }
        });

        if (!editMessage) {
            await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            return;
        }

        return ctx.wizard.next();
    }

    const caseText = dataCase.casePlatinum === '1' ? '–∫–µ–π—Å' : '–∫–µ–π—Å–∞';

    const editMessage = await editMessageOnlyText(ctx,
        `<b>üì¶ –£ –≤–∞—Å –µ—Å—Ç—å ${dataCase.casePlatinum} ${caseText} (–ü–ª–∞—Ç–∏–Ω–∞)!</b>\n\n` +
        `–í –Ω–µ–º –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç <b>5000 –¥–æ 10000</b>! üí†\n\n` +
        '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–∞—à –∫–µ–π—Å.', {
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: 'üóù –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å',
                        callback_data: 'open-case'
                    }
                ]
            ]
        }
    });

    if (!editMessage) {
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        return;
    }

    return ctx.wizard.next();
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    if ("data" in ctx.callbackQuery) {
        const dataCalback = ctx.callbackQuery.data;


        switch (dataCalback) {
            case 'shop-case':
                await ctx.scene.enter('caseShopScene')
                break
            case 'open-case':
                try {
                    const randomNumber = getRandomInRange(5000, 10000);

                    const boolScore = await updateUserScore(randomNumber, ctx.from?.id || 0);

                    if (!boolScore) {
                        throw new Error('–û—à–∏–±–∫–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—á–µ—Ç–∞!');
                    }

                    const boolCase = await updateCase('casePlatinum', "decrement", ctx.from?.id || 0)

                    if (!boolCase) {
                        throw new Error('–û—à–∏–±–∫–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–µ–π—Å–∞!');
                    }

                    const editMessage = await editMessageOnlyText(ctx,
                        `<b>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n–¢—ã –≤—ã–∏–≥—Ä–∞–ª <b>${randomNumber} –≥–µ–º–æ–≤</b>! üí†\n\n–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∫–µ–π—Å—ã –∏ –æ—Ç–∫—Ä—ã—Ç—å –∏—Ö!`, {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {
                                        text: '–ö–µ–π—Å—ã',
                                        callback_data: 'case'
                                    }
                                ]
                            ]
                        }
                    });

                    if (!editMessage) {
                        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                        return
                    }

                    return ctx.wizard.next();
                } catch (err) {
                    if (err instanceof Error) {
                        console.error(err.message);
                    } else {
                        console.error(err)
                    }
                    ctx.reply('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
                }
                break
        }
    }
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    if ("data" in ctx.callbackQuery) {
        const dataCalback = ctx.callbackQuery.data;
        if (dataCalback === 'case') {
            ctx.session.exitGems = true;
            await ctx.scene.enter('caseScene')
        } else {
            await ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!')
        }

    }
});

export const caseMysteryScene = new Scenes.WizardScene<MyContext>('caseMysteryScene', async (ctx) => {
    await updateUserCases(ctx);

    const dataCase = await redis.hgetall(`case-${ctx.from?.id}`);

    if (dataCase.caseMystery === '0') {
        const editMessage = await editMessageOnlyText(ctx,
            `<b>‚ùå –£ –≤–∞—Å –Ω–µ—Ç –º–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –∫–µ–π—Å–æ–≤!</b>\n\n` +
            `–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω –∏ <b>–ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ</b> –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–µ–π—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —à–∞–Ω—Å –Ω–∞ –≤—ã–∏–≥—Ä—ã—à! üí†\n\n` +
            `üì¶ <i>–ö–µ–π—Å –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.</i>`, {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–ú–∞–≥–∞–∑–∏–Ω –∫–µ–π—Å–æ–≤',
                            callback_data: 'shop-case'
                        }
                    ]
                ]
            }
        });

        if (!editMessage) {
            await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            return;
        }

        return ctx.wizard.next();
    }

    const caseText = dataCase.caseMystery === '1' ? '–∫–µ–π—Å' : '–∫–µ–π—Å–∞';

    const editMessage = await editMessageOnlyText(ctx,
        `<b>üì¶ –£ –≤–∞—Å –µ—Å—Ç—å ${dataCase.caseMystery} ${caseText} (–ú–∏—Å—Ç–∏–∫–∞)!</b>\n\n` +
        `–û—Ç–∫—Ä—ã–≤ –µ–≥–æ, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–µ–π—Å–æ–≤:\n` +
        `- –ë—Ä–æ–Ω–∑–æ–≤—ã–π (45%)\n` +
        `- –°–µ—Ä–µ–±—Ä—è–Ω—ã–π (35%)\n` +
        `- –ó–æ–ª–æ—Ç–æ–π (15%)\n` +
        `- –ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π (5%)\n\n` +
        `–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–∞—à –∫–µ–π—Å.`, {
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: 'üóù –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å',
                        callback_data: 'open-case'
                    }
                ]
            ]
        }
    });

    if (!editMessage) {
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        return;
    }

    return ctx.wizard.next();
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    if ("data" in ctx.callbackQuery) {
        const dataCalback = ctx.callbackQuery.data;

        console.log('dataCalback', dataCalback);

        switch (dataCalback) {
            case 'shop-case':
                await ctx.scene.enter('caseShopScene')
                break
            case 'open-case':
                try {
                    const randomCase = getRandomCase();

                    const boolCaseMystary = await updateCase('caseMystery', "decrement", ctx.from?.id || 0)

                    if (!boolCaseMystary) {
                        throw new Error('–û—à–∏–±–∫–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–µ–π—Å–∞!');
                    }

                    const boolCase = await updateCase(randomCase, "increment", ctx.from?.id || 0)

                    if (!boolCase) {
                        throw new Error('–û—à–∏–±–∫–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–µ–π—Å–∞!');
                    }

                    let caseName = '';

                    switch (randomCase) {
                        case 'caseBronza':
                            caseName = '–±—Ä–æ–Ω–∑–æ–≤—ã–π'
                            break
                        case 'caseSilver':
                            caseName = '—Å–µ—Ä–µ–±—Ä—è–Ω–Ω—ã–π'
                            break
                        case 'caseGold':
                            caseName = '–∑–æ–ª–æ—Ç–æ–π'
                            break
                        case 'casePlatinum':
                            caseName = '–ø–ª–∞—Ç–∏–Ω–æ–≤—ã–π'
                            break
                        default:
                            break
                    }

                    const editMessage = await editMessageOnlyText(ctx,
                        `<b>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n–¢—ã –≤—ã–∏–≥—Ä–∞–ª <b>${caseName} –∫–µ–π—Å</b>! üì¶\n\n–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∫–µ–π—Å—ã –∏ –æ—Ç–∫—Ä—ã—Ç—å –∏—Ö!`, {
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    {
                                        text: '–ö–µ–π—Å—ã',
                                        callback_data: 'case'
                                    }
                                ]
                            ]
                        }
                    });

                    if (!editMessage) {
                        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                        return
                    }

                    return ctx.wizard.next();
                } catch (err) {
                    if (err instanceof Error) {
                        console.error(err.message);
                    } else {
                        console.error(err)
                    }
                    ctx.reply('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
                }
                break
            default:
                console.warn(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: ${dataCalback}`);
                await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
                break;
        }
    }
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    if ("data" in ctx.callbackQuery) {
        const dataCalback = ctx.callbackQuery.data;
        if (dataCalback === 'case') {
            ctx.session.exitGems = true;
            await ctx.scene.enter('caseScene')
        } else {
            await ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!')
        }

    }
});

export const caseShopScene = new Scenes.WizardScene<MyContext>('caseShopScene', async (ctx) => {
    const editMessage = await editMessageOnlyText(ctx,
        `<b>üõí –í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–π—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏:</b>\n\n` +
        `1Ô∏è‚É£ <b>–ë—Ä–æ–Ω–∑–æ–≤—ã–π</b> ‚Äî <b>750</b> üí†\n` +
        `2Ô∏è‚É£ <b>–°–µ—Ä–µ–±—Ä—è–Ω—ã–π</b> ‚Äî <b>1 750</b> üí†\n` +
        `3Ô∏è‚É£ <b>–ó–æ–ª–æ—Ç–æ–π</b> ‚Äî <b>3 750</b> üí†\n` +
        `4Ô∏è‚É£ <b>–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π</b> ‚Äî <b>3 500</b> üí†\n` +
        `5Ô∏è‚É£ <b>–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥</b>\n\n` +
        `üìå –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.`, {
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: '1',
                        callback_data: '1-case'
                    },
                    {
                        text: '2',
                        callback_data: '2-case'
                    }
                ],
                [
                    {
                        text: '3',
                        callback_data: '3-case'
                    },
                    {
                        text: '4',
                        callback_data: '4-case'
                    },
                ],
                [
                    {
                        text: '5',
                        callback_data: '5-case'
                    }
                ]
            ]
        }
    });

    if (!editMessage) {
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        return
    }

    return ctx.wizard.next();
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    if ("data" in ctx.callbackQuery) {
        const dataCalback = ctx.callbackQuery.data;

        switch (dataCalback) {
            case '1-case':
                const caseBronza = await byeCase("caseBronza", ctx.from?.id || 0, 750);
                ctx.session.exitGems = true;
                return ctx.scene.enter('caseScene');

            case '2-case':
                const caseSilver = await byeCase("caseSilver", ctx.from?.id || 0, 1750);
                ctx.session.exitGems = true;
                return ctx.scene.enter('caseScene');

            case '3-case':
                const caseGold = await byeCase("caseGold", ctx.from?.id || 0, 3750);
                ctx.session.exitGems = true;
                return ctx.scene.enter('caseScene');

            case '4-case':
                const caseMystery = await byeCase("caseMystery", ctx.from?.id || 0, 3500);
                ctx.session.exitGems = true;
                return ctx.scene.enter('caseScene');

            case '5-case':
                if (ctx.session.shop) {
                    ctx.session.shop = false;
                    ctx.session.exitGems = true;
                    
                    return ctx.scene.enter('shopScene');
                }

                ctx.session.exitGems = true;
                return ctx.scene.enter('caseScene');

            default:
                break
        }
    }
});