import { checkSubscriptionMiddleware } from '../../index';
import axios from 'axios';
import { editMessage as editMessageFromGetAnket } from '../search/getAnket';
import { redis } from '../../index';

export async function handleCommand1(ctx: any) {
    if ('text' in ctx.message) {
        const message = ctx.message?.text;

        const checkSubscription = await checkSubscriptionMiddleware(ctx)

        if (!checkSubscription) {
            return;
        }

        if (ctx.session.sendMessage) {
            const result = await editMessageFromGetAnket(ctx);

            if (!result) {
                console.log('–û—à–∏–±–∫–∞ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!');
            }
        }

        if (message.startsWith('/')) {
            switch (message) {
                case '/profile':
                    return ctx.scene.enter('profileScene');
                case '/search':
                    ctx.session.sendMessage = 0
                    ctx.session.keyboard = true
                    return ctx.scene.enter('ancetScene');
                case '/send':
                    ctx.session.exitGems = false
                    ctx.session.sendMessage = 0
                    return ctx.scene.enter('sendGems');
                case '/likes':
                    return ctx.scene.enter('getLikes');
                case '/metches':
                    ctx.session.sendMessage = 0;
                    ctx.session.count = 0;
                    return ctx.scene.enter('getMetch');
                case '/reported':
                    return ctx.scene.enter('reportScene');
                case '/nexySession':
                    ctx.reply(JSON.stringify(ctx.session));
                    return ctx.scene.leave();
                case '/top':
                    ctx.session.sendMessage = 0
                    ctx.session.countTop = 1
                    return ctx.scene.enter('topScenes');
                case '/shop':
                    ctx.session.exitGems = false;
                    return ctx.scene.enter("shopScene");
                case '/case':
                    return ctx.scene.enter('caseScene');
                case '/ref':
                    return ctx.scene.enter("referalScene");
                case '/help':
                    await ctx.reply(
                        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
                        'üîπ <b>/profile</b> - –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å\n' +
                        'üîπ <b>/search</b> - –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç\n' +
                        'üîπ <b>/likes</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –ª–∞–π–∫–æ–≤\n' +
                        'üîπ <b>/metches</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ç—á–µ–π\n' +
                        'üîπ <b>/top</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–ø–∞ —é–∑–µ—Ä–∞\n' +
                        'üîπ <b>/send</b> - –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–º–æ–≤\n' +
                        'üîπ <b>/shop</b> - –ú–∞–≥–∞–∑–∏–Ω\n' +
                        'üîπ <b>/case</b> - –ö–µ–π—Å—ã\n' +
                        'üîπ <b>/ref</b> - –†–µ—Ñ–µ—Ä–∞–ª–∫–∞\n' +
                        'üîπ <b>/help</b> - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥',
                        {
                            parse_mode: 'HTML'
                        }
                    );
                    break;
                case '/luchaevaMuda':
                    return ctx.scene.enter('adminScene');
                case '/reported':
                    return ctx.scene.enter('reportScene');
                case '/exitNexy':
                    try {
                        const url = process.env.URL;

                        const getUser = await axios.get(`${url}/users/${ctx.from?.id}`);

                        const user = getUser.data.message;

                        if (user.role !== 'admin') {
                            await ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.');
                            return
                        }

                        await ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –≤—Å–µ —Å–µ—Å—Å–∏–∏! –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–≤–æ–∞—Ç—å /clearNexySession –∏–ª–∏ /nexySession –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏–∏ —Å–µ—Å—Å–∏–∏')
                        return ctx.scene.leave();
                    } catch (err) {
                        if (err instanceof Error) {
                            console.error(err.message);
                        } else {
                            console.error(err);
                        }

                        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —é–∑–µ—Ä–∞! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ–∑–µ —Ä–∞–∑');

                    }
                case '/start':
                    const referralCode = ctx.message.text.split(' ')[1];

                    console.log('referralCode', referralCode);

                    if (referralCode !== undefined) {
                        console.log('work')
                        await redis.set(`ref-${ctx.from.id}`, referralCode)

                        const ref = await redis.get(`ref-${ctx.from.id}`)

                        console.log("ref", ref)
                    }

                    await ctx.reply(`
                    üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤! üíò  
                    
                    üìå –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ª—é–¥–µ–π, –æ–±—â–∞—Ç—å—Å—è –∏, –≤–æ–∑–º–æ–∂–Ω–æ, –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å —Å–≤–æ—é –ª—é–±–æ–≤—å.  
                    
                    üîπ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∑–∞–ø–æ–ª–Ω–∏ —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É:  
                    üëâ –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /register
                    
                    üí° –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç—ã —Å–º–æ–∂–µ—à—å –∏—Å–∫–∞—Ç—å –ª—é–¥–µ–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /search.  
                    üì® –ï—Å–ª–∏ —É –≤–∞—Å —Å –∫–µ–º-—Ç–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å—Å—è!  
                    
                    üöÄ –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º? –í–≤–µ–¥–∏ /register –∏ —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É!
                    `)
                case '/register':
                    return ctx.scene.enter('regScene');

                default:
                    await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.');
                    break;
            }
            return;
        }

        switch (message) {
            case 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
                return ctx.scene.enter('profileScene');
            case 'üîç –ü–æ–∏—Å–∫':
                ctx.session.keyboard = true
                ctx.session.sendMessage = 0
                return ctx.scene.enter('ancetScene');
            case '‚ù§Ô∏è –õ–∞–π–∫–∏':
                return ctx.scene.enter('getLikes');
            case 'üíå –ú–µ—Ç—á–∏':
                ctx.session.count = 0;
                ctx.session.sendMessage = 0;
                return ctx.scene.enter('getMetch');
            case 'ü•á –¢–æ–ø':
                ctx.session.sendMessage = 0
                ctx.session.countTop = 1
                return ctx.scene.enter('topScenes');
            case 'üì¶ –ö–µ–π—Å—ã':
                return ctx.scene.enter('caseScene');
            case 'üõí –ú–∞–≥–∞–∑–∏–Ω':
                ctx.session.exitGems = false;
                return ctx.scene.enter("shopScene");
            case 'üîó –†–µ—Ñ–µ—Ä–∞–ª–∫–∞':
                return ctx.scene.enter("referalScene");
            case 'üí† –ì–µ–º—ã':
                ctx.session.exitGems = false
                ctx.session.sendMessage = 0
                return ctx.scene.enter('sendGems');
            default:
                await ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!');
                return;
        }
    }
}

export const getTopIcon = (top: number) => {
    if (top === 1) return 'üëë';
    if (top <= 3) return 'üèÖ';
    if (top <= 10) return 'üî•';
    if (top <= 50) return '‚ö°';
    return 'üìä';
};

export function formatNumber(num: number) {
    if (num >= 1_000_000_000) return (num / 1_000_000_000).toFixed(1) + "B";
    if (num >= 1_000_000) return (num / 1_000_000).toFixed(1) + "M";
    if (num >= 1_000) return (num / 1_000).toFixed(1) + "K";
    return num.toString();
}

export function formatText(rawText: string) {
    return rawText
        .replace(/\\n/g, '\n')
}

