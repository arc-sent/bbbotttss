import { editMessageMorGems, editMessageOnlyText } from './../search/getAnket';
import { BodyStatistics, MyContext } from './../../interfaces/state';
import { buttonSaveAgain, EditButtons, buttonNav, interactionButtonEdit, buttonsPremium, buttonsGems, buttonNavProfile } from './../../keyboards/Interaction';
import axios from "axios";
import { Scenes } from "telegraf";
import { buttonEditDelete } from "../../keyboards/Interaction";
import { redis } from '../..';
import { Payments, PaymentsGems } from '../../payments/payments';
import { formatNumber, getTopIcon, handleCommand1 } from '../commands/handle';
import { editMessage as editMessageFromGetAnket } from '../search/getAnket';

export const profileScene = new Scenes.WizardScene<MyContext>('profileScene', async (ctx) => {
    const userId = ctx.from?.id;

    if (!userId) {
        throw new Error('–û—à–∏–±–∫–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ —é–∑–µ—Ä–∞');
    }

    const banned = await redis.get(`ban-${ctx.from?.id}`);

    if (banned === 'true') {
        await ctx.reply('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º! –£ –≤–∞—Å –∏–º–µ–µ—Ç—Å—è –±–∞–Ω');
        return ctx.scene.leave();
    }


    const url = process.env.URL;
    const urlGet = `${url}/users/${userId}`;

    const req = await axios.get(urlGet);

    if (req.status === 400) {
        throw new Error(`–û—à–∏–±–∫–∞: ${JSON.stringify(req.data.message)}`);
    }

    const user = req.data.message;

    if (user.banned) {
        await ctx.reply('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º! –£ –≤–∞—Å –∏–º–µ–µ—Ç—Å—è –±–∞–Ω');
        redis.set(`ban-${ctx.from?.id}`, "true");
        return ctx.scene.leave();
    }

    await redis.hset(`user-${ctx.from.id}`, {
        name: user.name,
        description: user.description,
        photo: user.photo,
        city: user.city,
        age: user.age.toString(),
        minAge: user.minAge.toString(),
        maxAge: user.maxAge.toString(),
        likeWieved: user.likeWieved ? '1' : '0',
        dislikeWieved: user.dislikeWieved ? '1' : '0',
        coinWieved: user.coinWieved ? '1' : '0',
        premium: user.premium ? '1' : '0',
        role: user.role,
        photoMiniApp: user.photoMiniApp
    });

    const interactions = await redis.hgetall(`user-interactions-${ctx.from.id}`);

    if (Object.keys(interactions).length === 0) {
        let likesMax;
        let messageMax;

        if (user.premium) {
            likesMax = 500
            messageMax = 500
        } else {
            likesMax = 10
            messageMax = 5
        }

        await redis.hset(`user-interactions-${ctx.from.id}`, {
            likesMax: likesMax,
            messageMax: messageMax,
            like: '0',
            message: '0'
        });
    }

    const userData = await redis.hgetall(`user-${ctx.from.id}`);
    await redis.expire(`user-${ctx.from.id}`, 600);

    const iconsTop = getTopIcon(user.top);
    const formatNumberCoin = formatNumber(user.coin);
    const formatNumberLike = formatNumber(user.like);
    const formatNumberDislike = formatNumber(user.dislike);

    const profileMessage = `
<b>${user.premium ? '‚≠ê PREMIUM ‚≠ê' : 'üíò –ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}</b>
${iconsTop} <b>–ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ:</b> ${user.top}
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî  
${user.gender ? 'üë±üèª‚Äç‚ôÄÔ∏è' : 'üë±üèª'} <b>–ò–º—è:</b> ${userData.name}  
üéÇ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> ${userData.age}   
üìç <b>–ì–æ—Ä–æ–¥:</b> ${userData.city}  
üìñ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${userData.description}  
üéØ <b>–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:</b> ${userData.minAge} - ${userData.maxAge}
${user.searchGender ? 'üë±üèª‚Äç‚ôÄÔ∏è' : 'üë±üèª'} <b>–ü–æ–ª –ø–æ–∏—Å–∫–∞:</b> ${user.searchGender ? '–ñ–µ–Ω—Å–∫–∏–π' : '–ú—É–∂—Å–∫–æ–π'}    
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
‚ù§Ô∏è <b>–õ–∞–π–∫–æ–≤:</b> ${formatNumberLike}  
üëé <b>–î–∏–∑–ª–∞–π–∫–æ–≤:</b> ${formatNumberDislike}  
üí† <b>–ì–µ–º—ã:</b> ${formatNumberCoin}  
`;

    await ctx.reply(`üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>`, {
        ...buttonNavProfile,
        parse_mode: "HTML",
    }
    );


    await ctx.replyWithPhoto(userData.photo.trim() || '', {
        caption: profileMessage,
        parse_mode: "HTML",
        ...buttonEditDelete,
    }).then((sendMessage) => {
        ctx.session.sendMessage = sendMessage.message_id;
    });

    return ctx.wizard.next();
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    if ("data" in ctx.callbackQuery) {
        const dataCalback = ctx.callbackQuery.data;

        switch (dataCalback) {
            case 'edit':
                return ctx.scene.enter('editScene');
            case 'unplug':
                try {
                    const url = process.env.URL;
                    const req = await axios.put(`${url}/users/${ctx.from?.id}/shutdown`, {
                        status: true
                    }, {
                        validateStatus: () => true
                    });

                    if (req.status === 400) {
                        throw new Error(JSON.stringify(req.data.message));
                    }

                    const result = await editMessageFromGetAnket(ctx);

                    if (!result) {
                        console.log('–û—à–∏–±–∫–∞ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!');
                    }

                    await ctx.reply(
                        `‚úÖ <b>–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞!</b>\n\n` +
                        `–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá`,
                        {
                            parse_mode: 'HTML',
                            reply_markup: {
                                keyboard: [
                                    [
                                        {
                                            text: '–í–∫–ª—é—á–∏—Ç—å –∞–Ω–∫–µ—Ç—É'
                                        }
                                    ]
                                ],
                                resize_keyboard: true,
                                one_time_keyboard: true,
                            }
                        }
                    );



                    return ctx.scene.leave();
                } catch (err) {
                    if (err instanceof Error) {
                        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã: ${err.message}`)
                    } else {
                        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã. –û—à–∏–±–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è: ${err}`)
                    }

                    await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
                }

                return ctx.scene.leave();
            case 'mini_app':
                return ctx.scene.enter('miniAppScene');
            default:
                await ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!');
                return;
        }
    }
})


export const miniAppScene = new Scenes.WizardScene<MyContext>('miniAppScene', async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
    }

    const result = await editMessageFromGetAnket(ctx);

    if (!result) {
        console.log('–û—à–∏–±–∫–∞ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!');
    }

    const userData = await redis.hget(`user-${ctx.from?.id}`, "photoMiniApp");

    if (userData) {
        await ctx.sendDocument(userData || '', {
            caption: 'üì∏ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∞–Ω–∫–µ—Ç—ã –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –µ–≥–æ.',
            parse_mode: "HTML",
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: 'üìù –û–±–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
                            callback_data: 'edit-mini-app'
                        }
                    ],
                    [
                        {
                            text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
                            web_app: {
                                url: "https://a2ba-31-131-74-62.ngrok-free.app"
                            }

                        }
                    ]
                ]
            }
        }).then((sendMessage) => {
            ctx.session.sendMessage = sendMessage.message_id;
        });
    } else {
        await ctx.reply(
            "üì∑ –ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º, –¥–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –∞–Ω–∫–µ—Ç—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
            {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üìù –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
                                callback_data: 'edit-mini-app'
                            }
                        ]
                    ]
                }
            }
        ).then((sendMessage) => {
            ctx.session.sendMessage = sendMessage.message_id;
        });
    }



    return ctx.wizard.next()
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    if ("data" in ctx.callbackQuery) {
        const dataCalback = ctx.callbackQuery.data;

        const result = await editMessageFromGetAnket(ctx);

        if (dataCalback === 'edit-mini-app') {
            return ctx.scene.enter('editPhotoInAnket');
        }
    }
});



export const editScene = new Scenes.WizardScene<MyContext>('editScene', async (ctx) => {
    const result = await editMessageFromGetAnket(ctx);

    if (!result) {
        console.log('–û—à–∏–±–∫–∞ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!');
    }

    await ctx.reply(
        `<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∫–µ—Ç—ã</b>\n\n` +
        `1Ô∏è‚É£ <b>–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è</b>\n` +
        `2Ô∏è‚É£ <b>–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ</b>\n` +
        `3Ô∏è‚É£ <b>–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</b>\n` +
        `4Ô∏è‚É£ <b>–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç</b>\n` +
        `5Ô∏è‚É£ <b>–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥</b>\n` +
        `6Ô∏è‚É£ <b>–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª</b>\n` +
        `7Ô∏è‚É£ <b>–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª –ø–æ–∏—Å–∫–∞</b>\n` +
        `8Ô∏è‚É£ <b>–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω</b>\n` +
        `9Ô∏è‚É£ <b>–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–î–æ—Å—Ç—É–ø–Ω–æ —Å –ø—Ä–µ–º–∏—É–º–æ–º)</b>\n` +
        `üîü <b>–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ</b>\n\n` +
        `üìå –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.`,
        { parse_mode: "HTML", ...EditButtons }
    ).then((sendMessage) => {
        ctx.session.sendMessage = sendMessage.message_id;
    });
    return ctx.wizard.next();
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    if ("data" in ctx.callbackQuery) {
        const message = ctx.callbackQuery.data;

        const userData1 = await redis.hgetall(`user-${ctx.from?.id}`);

        const result = await editMessageFromGetAnket(ctx);

        if (!result) {
            console.log('–û—à–∏–±–∫–∞ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!');
        }

        switch (message) {
            case '1':
                await ctx.scene.enter('editName');
                break

            case '2':
                await ctx.scene.enter('editDescription');
                break

            case '3':
                ctx.scene.enter('editPhoto');
                break

            case '4':
                await ctx.scene.enter('editAge');
                break

            case '5':
                await ctx.scene.enter('editCity');
                break

            case '6':
                await ctx.scene.enter('editGender');
                break

            case '7':
                await ctx.scene.enter('editGenderSearch');
                break

            case '8':
                await ctx.scene.enter('editMinMax');
                break

            case '9':
                const boolean = userData1.premium === "1" ? true : false;
                if (!boolean) {
                    await ctx.reply(`
üö´ <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!</b>  
    
üîí –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º ‚≠ê PREMIUM ‚≠ê.  
‚ú® –û—Ñ–æ—Ä–º–∏ –ø—Ä–µ–º–∏—É–º –∏ –ø–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏!  
`, { parse_mode: 'HTML' });
                } else {
                    await ctx.scene.enter('editStatistics');
                }
                break

            case '10':
                return ctx.scene.enter('refreshScene');
            default:
                break
        }
    }

})

export const editGender = new Scenes.WizardScene<MyContext>('editGender', async (ctx) => {
    await ctx.reply('–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞—à –ø–æ–ª', {
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: '–ú—É–∂—Å–∫–æ–π',
                        callback_data: 'false'
                    }
                ],
                [
                    {
                        text: '–ñ–µ–Ω—Å–∫–∏–π',
                        callback_data: 'true'
                    }
                ]
            ]
        }
    }).then((sendMessage) => {
        ctx.session.sendMessage = sendMessage.message_id;
    });;

    return ctx.wizard.next();
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏');
        return
    }

    if ("data" in ctx.callbackQuery) {
        const message = ctx.callbackQuery.data;

        const result = await editMessageFromGetAnket(ctx);

        if (!result) {
            console.log('–û—à–∏–±–∫–∞ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!');
        }

        if (message === 'true' || message === 'false') {
            console.log('message', message);
            const resultUpdate = await editGenderSearchSave(message, String(ctx.from?.id), false);

            if (!resultUpdate.status) {
                console.error(resultUpdate.message);
                await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑');
            }

            return ctx.scene.enter('profileScene');
        } else {
            await ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏');
            return
        }
    }
});

export const editGenderSearch = new Scenes.WizardScene<MyContext>('editGenderSearch', async (ctx) => {
    await ctx.reply('–í—ã–±–µ—Ä–µ—Ç–µ, –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–∞—Ç—å', {
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: '–ú—É–∂—á–∏–Ω',
                        callback_data: 'false'
                    }
                ],
                [
                    {
                        text: '–ñ–µ–Ω—â–∏–Ω',
                        callback_data: 'true'
                    }
                ]
            ]
        }
    }).then((sendMessage) => {
        ctx.session.sendMessage = sendMessage.message_id;
    });

    return ctx.wizard.next();
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏');
        return
    }

    if ("data" in ctx.callbackQuery) {
        const message = ctx.callbackQuery.data;


        const result = await editMessageFromGetAnket(ctx);

        if (!result) {
            console.log('–û—à–∏–±–∫–∞ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!');
        }

        if (message === 'true' || message === 'false') {
            console.log('message', message);
            const resultUpdate = await editGenderSearchSave(message, String(ctx.from?.id), true);

            if (!resultUpdate.status) {
                console.error(resultUpdate.message);
                await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
            }

            return ctx.scene.enter('profileScene');
        } else {
            await ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏');
            return
        }
    }
})

export const editName = new Scenes.WizardScene<MyContext>('editName', async (ctx) => {
    ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è");
    return ctx.wizard.next();
}, async (ctx) => {
    if (ctx.message === undefined) {
        ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç!');
        return
    }

    if ("text" in ctx.message) {
        await redis.hset(`user-${ctx.from?.id}`, "name", ctx.message.text);
        const userData = await redis.hgetall(`user-${ctx.from?.id}`);
        const editProfileMessage = await editMessage(userData);

        await ctx.reply('–£—Å–ø–µ—à–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏!');
        ctx.replyWithPhoto(userData.photo || '', {
            caption: editProfileMessage,
            parse_mode: "HTML",
            ...buttonSaveAgain
        }).then((sendMessage) => {
            ctx.session.sendMessage = sendMessage.message_id;
        });

        return ctx.wizard.next();
    }
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏');
        return
    }

    if ("data" in ctx.callbackQuery) {

        const result = await editMessageFromGetAnket(ctx);

        if (!result) {
            console.log('–û—à–∏–±–∫–∞ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!');
        }

        if (ctx.callbackQuery.data === 'save') {
            SaveEdit(ctx, "name");
        } else if (ctx.callbackQuery.data === 'again') {
            ctx.scene.enter('editName')
            return ctx.scene.leave()
        }
    }
});

export const editDescription = new Scenes.WizardScene<MyContext>('editDescription', async (ctx) => {
    ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ");
    return ctx.wizard.next();
}, async (ctx) => {
    if (ctx.message === undefined) {
        ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç!');
        return
    }

    if ("text" in ctx.message) {
        await redis.hset(`user-${ctx.from?.id}`, "description", ctx.message.text);
        const userData = await redis.hgetall(`user-${ctx.from?.id}`);
        const editProfileMessage = await editMessage(userData);

        await ctx.reply('–£—Å–ø–µ—à–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è!');
        ctx.replyWithPhoto(userData.photo || '', {
            caption: editProfileMessage,
            parse_mode: "HTML",
            ...buttonSaveAgain
        }).then((sendMessage) => {
            ctx.session.sendMessage = sendMessage.message_id;
        });

        return ctx.wizard.next();
    }
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏');
        return
    }

    if ("data" in ctx.callbackQuery) {

        const result = await editMessageFromGetAnket(ctx);

        if (!result) {
            console.log('–û—à–∏–±–∫–∞ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!');
        }

        if (ctx.callbackQuery.data === 'save') {
            SaveEdit(ctx, "description");
        } else if (ctx.callbackQuery.data === 'again') {
            ctx.scene.enter('editDescription')
            return ctx.scene.leave()
        }
    }
});

export const editPhoto = new Scenes.WizardScene<MyContext>('editPhoto', async (ctx) => {
    ctx.reply('–°–∫–∏–Ω—å—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é');
    return ctx.wizard.next();
}, async (ctx) => {
    if (ctx.message === undefined) {
        ctx.reply('‚ö†Ô∏è –í—ã —Å–¥–µ–ª–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ! –ó–∞–ø—É—Å—Ç–∏—Ç–µ /profile –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑');
        return
    }

    if ("photo" in ctx.message) {
        const photo = ctx.message?.photo;

        console.log(photo[0].file_id);
        const fileId = photo[0].file_id

        await redis.hset(`user-${ctx.from?.id}`, "photo", fileId);
        const userData = await redis.hgetall(`user-${ctx.from?.id}`);
        const editProfileMessage = await editMessage(userData);

        await ctx.reply('–£—Å–ø–µ—à–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ!');
        ctx.replyWithPhoto(userData.photo || '', {
            caption: editProfileMessage,
            parse_mode: "HTML",
            ...buttonSaveAgain
        }).then((sendMessage) => {
            ctx.session.sendMessage = sendMessage.message_id;
        });

        return ctx.wizard.next();
    }
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏');
        return
    }

    if ("data" in ctx.callbackQuery) {
        const result = await editMessageFromGetAnket(ctx);

        if (!result) {
            console.log('–û—à–∏–±–∫–∞ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!');
        }

        if (ctx.callbackQuery.data === 'save') {
            SaveEdit(ctx, "photo");
        } else if (ctx.callbackQuery.data === 'again') {
            ctx.scene.enter('editPhoto')
            return ctx.scene.leave()
        }
    }
});

export const editPhotoInAnket = new Scenes.WizardScene<MyContext>('editPhotoInAnket', async (ctx) => {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–∞–∫ —Ñ–∞–π–ª:\n‚Äî –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ–º: –Ω–∞–∂–º–∏—Ç–µ ¬´üìé¬ª ‚Üí ¬´–§–∞–π–ª¬ª ‚Üí –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏;\n‚Äî –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –±–µ–∑ —Å–∂–∞—Ç–∏—è.\n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.');

    return ctx.wizard.next();
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }

            if ('document' in ctx.message) {
                const document = ctx.message.document;

                const type_file = document.mime_type

                if (type_file !== 'image/jpeg') {
                    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .png –∏–ª–∏ .jpeg');

                    return
                }

                await redis.hset(`user-${ctx.from?.id}`, "photoMiniApp", document.file_id);

                const editProfileMessage = '–í—Å–µ –≤–µ—Ä–Ω–æ?'
                await ctx.sendDocument(document.file_id || '', {
                    caption: editProfileMessage,
                    parse_mode: "HTML",
                    ...buttonSaveAgain
                }).then((sendMessage) => {
                    ctx.session.sendMessage = sendMessage.message_id;
                });

                return ctx.wizard.next();
            }
        }
        return
    }
}, async (ctx) => {
    if (ctx.callbackQuery === undefined) {
        ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏');
        return
    }

    if ('data' in ctx.callbackQuery) {
        const result = await editMessageFromGetAnket(ctx);

        if (!result) {
            console.log('–û—à–∏–±–∫–∞ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!');
        }

        if (ctx.callbackQuery.data === 'again') {
            return ctx.scene.enter('editPhotoInAnket');
        } else if (ctx.callbackQuery.data === 'save') {
            SaveEdit(ctx, "photoMiniApp");
        }
    }
})

export const editAge = new Scenes.WizardScene<MyContext>('editAge', async (ctx) => {
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 0 –¥–æ 99 –ª–µ—Ç');
    return ctx.wizard.next();
}, async (ctx) => {
    if (ctx.message === undefined) {
        ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç!');
        return
    }

    if ('text' in ctx.message) {
        const message = ctx.message.text;

        if (!(/^\d{1,2}$/.test(message) && Number(message) >= 0 && Number(message) <= 99)) {
            await ctx.reply('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 0 –¥–æ 99 –ª–µ—Ç');
            return
        }

        await redis.hset(`user-${ctx.from?.id}`, "age", message);
        const userData = await redis.hgetall(`user-${ctx.from?.id}`);
        const editProfileMessage = await editMessage(userData);

        await ctx.reply('–£—Å–ø–µ—à–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞!');
        ctx.replyWithPhoto(userData.photo || '', {
            caption: editProfileMessage,
            parse_mode: "HTML",
            ...buttonSaveAgain
        }).then((sendMessage) => {
            ctx.session.sendMessage = sendMessage.message_id;
        });

        return ctx.wizard.next();
    }
}, async (ctx) => {
    if (ctx.callbackQuery === undefined) {
        ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏');
        return
    }

    if ('data' in ctx.callbackQuery) {
        const result = await editMessageFromGetAnket(ctx);

        if (!result) {
            console.log('–û—à–∏–±–∫–∞ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!');
        }

        if (ctx.callbackQuery.data === 'again') {
            ctx.scene.enter('editAge');
            return ctx.scene.leave();
        } else if (ctx.callbackQuery.data === 'save') {
            SaveEdit(ctx, "age");
        }
    }
})

export const editCity = new Scenes.WizardScene<MyContext>('editCity', async (ctx) => {
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (–°–∫—Ä–µ–ø–∫–∞ ‚Üí –õ–æ–∫–∞—Ü–∏—è ‚Üí –û—Ç–ø—Ä–∞–≤–∏—Ç—å)');
    return ctx.wizard.next();
}, async (ctx) => {
    if (ctx.message === undefined) {
        ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç!');
        return
    }

    try {
        if ('text' in ctx.message) {
            const message = ctx.message.text;

            if (!(/^[a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9\s-]+$/.test(message) && !/^\d+$/.test(message))) {
                await ctx.reply('‚ö†Ô∏è –ù–∞–∑–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
                return
            }

            await redis.hset(`user-${ctx.from?.id}`, "city", message);
            const userData = await redis.hgetall(`user-${ctx.from?.id}`);
            const editProfileMessage = await editMessage(userData);

            await ctx.reply('–£—Å–ø–µ—à–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞!');
            ctx.replyWithPhoto(userData.photo || '', {
                caption: editProfileMessage,
                parse_mode: "HTML",
                ...buttonSaveAgain
            }).then((sendMessage) => {
                ctx.session.sendMessage = sendMessage.message_id;
            });

            return ctx.wizard.next();
        }

        if ('location' in ctx.message) {
            const { latitude, longitude } = ctx.message.location;

            const url = `https://nominatim.openstreetmap.org/reverse?lat=${latitude}&lon=${longitude}&format=json`;

            const req = await axios.get(url, {
                validateStatus: () => true
            });

            if (req.status === 400) {
                throw new Error(JSON.stringify(req.data));
            }

            const city = req.data.address.city || req.data.address.town || req.data.address.village || req.data.address.municipality || req.data.address.hamlet

            console.log("city", city)

            if (!city) {
                await ctx.reply('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–π –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ.');
                return
            }

            await redis.hset(`user-${ctx.from?.id}`, "city", city);
            const userData = await redis.hgetall(`user-${ctx.from?.id}`);
            const editProfileMessage = await editMessage(userData);

            await ctx.reply('–£—Å–ø–µ—à–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞!');
            ctx.replyWithPhoto(userData.photo || '', {
                caption: editProfileMessage,
                parse_mode: "HTML",
                ...buttonSaveAgain
            }).then((sendMessage) => {
                ctx.session.sendMessage = sendMessage.message_id;
            });

            return ctx.wizard.next();
        }
    } catch (err) {
        if (err instanceof Error) {
            console.error('–û—à–∏–±–∫–∞ –≤ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞:', err.message)
        } else {
            console.error('–û—à–∏–±–∫–∞ –≤ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞:', err)
        }

        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –º–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
        return ctx.wizard.next()
    }
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    if ('data' in ctx.callbackQuery) {
        const result = await editMessageFromGetAnket(ctx);

        if (!result) {
            console.log('–û—à–∏–±–∫–∞ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!');
        }

        if (ctx.callbackQuery.data === 'again') {
            ctx.scene.enter('editCity');
            return ctx.scene.leave();
        } else if (ctx.callbackQuery.data === 'save') {
            SaveEdit(ctx, "city");
            await redis.del(`user-search-${ctx.from?.id}`);
        }
    }
})

export const editStatistics = new Scenes.WizardScene<MyContext>('editStatistics', async (ctx) => {
    const userData = await redis.hgetall(`user-${ctx.from?.id}`);

    console.log("userData", userData);

    await ctx.reply(`
üìä <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π:</b>
        
1Ô∏è‚É£ <b>–õ–∞–π–∫–∏</b> ${userData.likeWieved === '1' ? '(–°–∫—Ä—ã—Ç—å)' : '(–û—Ç–∫—Ä—ã—Ç—å)'}  
2Ô∏è‚É£ <b>–î–∏–∑–ª–∞–π–∫–∏</b> ${userData.dislikeWieved === '1' ? '(–°–∫—Ä—ã—Ç—å)' : '(–û—Ç–∫—Ä—ã—Ç—å)'}  
3Ô∏è‚É£ <b>–ö–æ–∏–Ω—ã</b> ${userData.coinWieved === '1' ? '(–°–∫—Ä—ã—Ç—å)' : '(–û—Ç–∫—Ä—ã—Ç—å)'}  
        
üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.
`, {
        parse_mode: 'HTML',
        reply_markup: {
            inline_keyboard: [
                [
                    { text: '1', callback_data: 'stat-1' },
                    { text: '2', callback_data: 'stat-2' },
                    { text: '3', callback_data: 'stat-3' }
                ]
            ],
            resize_keyboard: true,
            one_time_keyboard: false
        }
    }).then((sendMessage) => {
        ctx.session.sendMessage = sendMessage.message_id;
    });

    return ctx.wizard.next();
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    if ("data" in ctx.callbackQuery) {
        const message = ctx.callbackQuery.data;
        const userData = await redis.hgetall(`user-${ctx.from?.id}`);

        const result = await editMessageFromGetAnket(ctx);

        if (!result) {
            console.log('–û—à–∏–±–∫–∞ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!');
        }

        if (message === 'stat-1') {
            const bool = userData.likeWieved === "1" ? true : false

            const result = await updateStatistics({ like: !bool }, `${ctx.from?.id}`);
            if (result) {
                await ctx.reply(`<b>‚úÖ –£—Å–ø–µ—à–Ω–æ!</b> –î–∏–∑–ª–∞–π–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ ${!bool ? '–æ—Ç–∫—Ä—ã—Ç' : '—Å–∫—Ä—ã—Ç'}.`, { parse_mode: 'HTML' });
            } else {
                await ctx.reply('<b>‚ùå –û—à–∏–±–∫–∞!</b> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', { parse_mode: 'HTML' });
            }

            ctx.scene.enter('profileScene');
        } else if (message === 'stat-2') {
            const bool = userData.dislikeWieved === "1" ? true : false

            const result = await updateStatistics({ dislike: !bool }, `${ctx.from?.id}`);
            if (result) {
                await ctx.reply(`<b>‚úÖ –£—Å–ø–µ—à–Ω–æ!</b> –î–∏–∑–ª–∞–π–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ ${!bool ? '–æ—Ç–∫—Ä—ã—Ç' : '—Å–∫—Ä—ã—Ç'}.`, { parse_mode: 'HTML' });
            } else {
                await ctx.reply('<b>‚ùå –û—à–∏–±–∫–∞!</b> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', { parse_mode: 'HTML' });
            }

            ctx.scene.enter('profileScene');
        } else if (message === 'stat-3') {
            const bool = userData.coinWieved === "1" ? true : false

            const result = await updateStatistics({ coin: !bool }, `${ctx.from?.id}`);
            if (result) {
                await ctx.reply(`<b>‚úÖ –£—Å–ø–µ—à–Ω–æ!</b> –î–∏–∑–ª–∞–π–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ ${!bool ? '–æ—Ç–∫—Ä—ã—Ç' : '—Å–∫—Ä—ã—Ç'}.`, { parse_mode: 'HTML' });
            } else {
                await ctx.reply('<b>‚ùå –û—à–∏–±–∫–∞!</b> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑', { parse_mode: 'HTML' });
            }
            await ctx.scene.enter('profileScene');
        }
    }
});

export const editMinMax = new Scenes.WizardScene<MyContext>('editMinMax', async (ctx) => {
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–∏—Å–∫–∞');
    return ctx.wizard.next();
}, async (ctx) => {
    if (ctx.message === undefined) {
        ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç!');
        return
    }
    if ('text' in ctx.message) {
        const message = ctx.message.text;

        if (!(/^\d{1,2}$/.test(message) && Number(message) >= 0 && Number(message) <= 99)) {
            await ctx.reply('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 0 –¥–æ 99 –ª–µ—Ç');
            return
        }

        await redis.hset(`user-${ctx.from?.id}`, "minAge", message);
        ctx.reply('–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–∏—Å–∫–∞');
        return ctx.wizard.next();
    }

}, async (ctx) => {
    if (ctx.message === undefined) {
        ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç!');
        return
    }
    if ('text' in ctx.message) {
        const message = ctx.message.text;

        if (!(/^\d{1,2}$/.test(message) && Number(message) >= 0 && Number(message) <= 99)) {
            await ctx.reply('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 0 –¥–æ 99 –ª–µ—Ç');
            return
        }

        await redis.hset(`user-${ctx.from?.id}`, "maxAge", message);
        const userData = await redis.hgetall(`user-${ctx.from?.id}`);
        const editProfileMessage = await editMessage(userData);

        await ctx.reply('–£—Å–ø–µ—à–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞!');
        ctx.replyWithPhoto(userData.photo || '', {
            caption: editProfileMessage,
            parse_mode: "HTML",
            ...buttonSaveAgain
        }).then((sendMessage) => {
            ctx.session.sendMessage = sendMessage.message_id;
        });
        return ctx.wizard.next();
    }

}, async (ctx) => {
    if (ctx.callbackQuery === undefined) {
        ctx.reply('‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏');
        return
    }

    if ('data' in ctx.callbackQuery) {
        const result = await editMessageFromGetAnket(ctx);

        if (!result) {
            console.log('–û—à–∏–±–∫–∞ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!');
        }

        if (ctx.callbackQuery.data === 'again') {
            ctx.scene.enter('editMinMax');
            return ctx.scene.leave();
        } else if (ctx.callbackQuery.data === 'save') {
            try {
                const url = process.env.URL;
                const urlPath = `${url}/users/${ctx.from?.id}`;
                const userData = await redis.hgetall(`user-${ctx.from?.id}`);
                const body = { ageMinMax: { minAge: Number(userData.minAge), maxAge: Number(userData.maxAge) } };

                const req = await axios.patch(urlPath, body);

                if (req.status === 400) {
                    throw new Error(JSON.stringify(req.data) + req.status)
                }

                await ctx.reply('–£—Å–ø–µ—à–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —é–∑–µ—Ä–∞!', buttonNav);
                await ctx.scene.enter('profileScene');
                await redis.del(`user-search-${ctx.from?.id}`);
                return ctx.scene.leave()
            } catch (err) {
                if (err instanceof Error) {
                    console.error(err.message);
                }
                await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –º–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
                return ctx.wizard.next()
            }
        }
    }
})

export const refreshScene = new Scenes.WizardScene<MyContext>('refreshScene', async (ctx) => {
    await ctx.reply('–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?');
    return ctx.wizard.next();
}, async (ctx) => {
    if (ctx.message === undefined) {
        ctx.reply('‚ö†Ô∏è –¢—ã —Å–¥–µ–ª–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ! –ó–∞–ø—É—Å—Ç–∏ /profile –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑');
        return
    }

    if ("text" in ctx.message) {
        const message = ctx.message?.text;

        await redis.hset(`user-${ctx.from?.id}`, "name", message);

        ctx.reply('–¢–µ–ø–µ—Ä—å –∏–∑–º–µ–Ω–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ')
        return ctx.wizard.next();
    }
}, async (ctx) => {
    if (ctx.message === undefined) {
        ctx.reply('‚ö†Ô∏è –í—ã —Å–¥–µ–ª–∞–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ! –ó–∞–ø—É—Å—Ç–∏—Ç–µ /profile –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
        return
    }

    if ("text" in ctx.message) {
        const message = ctx.message?.text;

        await redis.hset(`user-${ctx.from?.id}`, "description", message);

        ctx.reply('–¢–µ–ø–µ—Ä—å –∏–∑–º–µ–Ω–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é (–°–∫—Ä–µ–ø–∫–∞ ‚Üí –õ–æ–∫–∞—Ü–∏—è ‚Üí –û—Ç–ø—Ä–∞–≤–∏—Ç—å)');
        return ctx.wizard.next();
    }
}, async (ctx) => {
    if (ctx.message === undefined) {
        ctx.reply('‚ö†Ô∏è –¢—ã —Å–¥–µ–ª–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ! –ó–∞–ø—É—Å—Ç–∏ /profile –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑');
        return
    }

    if ("text" in ctx.message) {
        const message = ctx.message?.text;

        if (!(/^[a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9\s-]+$/.test(message) && !/^\d+$/.test(message))) {
            await ctx.reply('‚ö†Ô∏è –ù–∞–∑–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ –ø—Ä–æ—à–ª–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
            return
        }

        await redis.hset(`user-${ctx.from?.id}`, "city", message);

        await ctx.reply('–í–∞–≥ –≥–æ—Ä–æ–¥ –∏–∑–º–µ–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –∏–∑–º–µ–Ω–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç')
        return ctx.wizard.next();
    }

    if ('location' in ctx.message) {
        const { latitude, longitude } = ctx.message.location;

        const url = `https://nominatim.openstreetmap.org/reverse?lat=${latitude}&lon=${longitude}&format=json`;

        const req = await axios.get(url, {
            validateStatus: () => true
        });

        if (req.status === 400) {
            throw new Error(JSON.stringify(req.data));
        }

        const city = req.data.address.city || req.data.address.town || req.data.address.village || req.data.address.municipality || req.data.address.hamlet

        if (!city) {
            await ctx.reply('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–π –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ.');
            return
        }

        await redis.hset(`user-${ctx.from?.id}`, "city", city);

        await ctx.reply('–¢–µ–ø–µ—Ä—å –∏–∑–º–µ–Ω–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç')
        return ctx.wizard.next();
    }
}, async (ctx) => {
    if (ctx.message === undefined) {
        ctx.reply('‚ö†Ô∏è –í—ã —Å–¥–µ–ª–∞–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ! –ó–∞–ø—É—Å—Ç–∏—Ç–µ /profile –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
        return
    }

    if ("text" in ctx.message) {
        const message = ctx.message?.text;

        if (!(/^\d{1,2}$/.test(message) && Number(message) >= 0 && Number(message) <= 99)) {
            await ctx.reply('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 0 –¥–æ 99 –ª–µ—Ç');
            return
        }

        await redis.hset(`user-${ctx.from?.id}`, "age", message);

        ctx.reply('–¢–µ–ø–µ—Ä—å –∏–∑–º–µ–Ω–∏—Ç–µ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é')
        return ctx.wizard.next();
    }
}, async (ctx) => {
    if (ctx.message === undefined) {
        ctx.reply('‚ö†Ô∏è –¢—ã —Å–¥–µ–ª–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ! –ó–∞–ø—É—Å—Ç–∏ /profile –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑');
        return
    }

    if ("photo" in ctx.message) {
        const photo = ctx.message?.photo;

        console.log(photo[0].file_id);
        const fileId = photo[0].file_id

        await redis.hset(`user-${ctx.from?.id}`, "photo", fileId);

        const userData = await redis.hgetall(`user-${ctx.from?.id}`);
        const editProfileMessage = await editMessage(userData);

        await ctx.reply('–í–∞—à–∞ –∏–∑–º–µ–Ω–µ–Ω–∞—è –∞–Ω–∫–µ—Ç–∞. –û—Ç–¥–µ–ª—å–Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∞–Ω–∫–µ—Ç');
        ctx.replyWithPhoto(userData.photo || '', {
            caption: editProfileMessage,
            parse_mode: "HTML",
            ...buttonSaveAgain
        }).then((sendMessage) => {
            ctx.session.sendMessage = sendMessage.message_id;
        });
        return ctx.wizard.next();
    }
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!')
        return
    }

    if ("data" in ctx.callbackQuery) {
        const result = await editMessageFromGetAnket(ctx);

        if (!result) {
            console.log('–û—à–∏–±–∫–∞ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!');
        }

        if (ctx.callbackQuery.data === 'save') {
            try {
                const userData = await redis.hgetall(`user-${ctx.from?.id}`);

                const body = {
                    name: userData.name,
                    description: userData.description,
                    photo: userData.photo,
                    city: userData.city,
                    age: Number(userData.age)
                }

                const url = process.env.URL;
                const urlPut = `${url}/users/${ctx.from?.id}`;

                const req = await axios.put(urlPut, body);

                if (req.status === 400) {
                    throw new Error(`${JSON.stringify(req.data)}`)
                }
                await ctx.scene.enter('profileScene');
                await redis.del(`user-search-${ctx.from?.id}`);
                return ctx.scene.leave();
            } catch (err) {
                if (err instanceof Error) {
                    console.error(err.message);
                }
                console.error(err);
                ctx.reply(`Error: ${err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
            }
        } else if (ctx.callbackQuery.data === 'again') {
            ctx.scene.enter('refreshScene');
            return ctx.scene.leave()
        }
    }
});

export const premiumSceneProfile = new Scenes.WizardScene<MyContext>('premiumSceneProfile', async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    const editMessage = await editMessageOnlyText(ctx,
        `
<b>üíé –ü—Ä–µ–º–∏—É–º –∑–∞ –∑–≤–µ–∑–¥—ã! üíé</b>  
        
üî• –°—Ç–∞–Ω—å—Ç–µ –æ–±–ª–∞–¥–∞—Ç–µ–ª–µ–º <b>‚≠ê PREMIUM ‚≠ê</b> –∏ –ø–æ–ª—É—á–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:  
        
1Ô∏è‚É£ üîç <b>–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π:</b> –ò—â–∏—Ç–µ –∞–Ω–∫–µ—Ç—ã –±–µ–∑ –ª–∏–º–∏—Ç–æ–≤!  
2Ô∏è‚É£ üõ°Ô∏è <b>–°–∫—Ä—ã–≤–∞–π—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b> –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ª–∞–π–∫–æ–≤ –∏ –¥–∏–∑–ª–∞–π–∫–æ–≤.  
3Ô∏è‚É£ üåü <b>–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è –æ—Ç–º–µ—Ç–∫–∞:</b> –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—É–¥–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∞ <b>‚≠ê PREMIUM ‚≠ê</b> –≤–º–µ—Å—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ üíò.  
4Ô∏è‚É£ üöÄ <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∏—Å–∫–µ:</b> –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–µ—Ä–≤–æ–π –∏ –ø–æ–ø–∞–¥–∞—Ç—å—Å—è –≤ 5 —Ä–∞–∑ —á–∞—â–µ!  
`, {
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: '‚≠ê –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º –Ω–∞ –¥–µ–Ω—å 250 –∑–≤–µ–∑–¥',
                        callback_data: 'prem_250'
                    }
                ],
                [
                    {
                        text: '‚≠ê –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º –Ω–∞ –Ω–µ–¥–µ–ª—é 500 –∑–≤–µ–∑–¥',
                        callback_data: 'prem_500'
                    }
                ],
                [
                    {
                        text: '‚≠ê –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º –Ω–∞ –º–µ—Å—è—Ü 800 –∑–≤–µ–∑–¥',
                        callback_data: 'prem_800'
                    }
                ],
                [
                    {
                        text: '‚≠ê –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º –Ω–∞ –¥–µ–Ω—å 8,000 –∑–≤–µ–∑–¥',
                        callback_data: 'prem_8000'
                    }
                ],
                [
                    {
                        text: 'üíé –ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º –∑–∞ 35,000 –≥–µ–º–æ–≤',
                        callback_data: 'prem_35000_gems'
                    }
                ],
                [
                    {
                        text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥',
                        callback_data: 'exit',
                    }
                ]
            ]
        }
    });

    if (!editMessage) {
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        return
    }

    ctx.session.exitGems = false

    return ctx.wizard.next();

}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    if ("data" in ctx.callbackQuery) {

        const message = ctx.callbackQuery.data;

        switch (message) {
            case 'prem_250':
                await Payments(ctx, 250, 1);
                break
            case 'prem_500':
                await Payments(ctx, 500, 7);
                break
            case 'prem_800':
                await Payments(ctx, 800, 30);
                break
            case 'prem_8000':
                await Payments(ctx, 8000, 365);
                break
            case 'prem_35000_gems':
                try {
                    const url = process.env.URL;

                    const updateUserGems = await axios.put(`${url}/users/${ctx.from?.id}/gems`, {
                        action: 'decrement',
                        count: 35000
                    }, {
                        validateStatus: () => true
                    });

                    if (updateUserGems.status === 400) {
                        throw new Error(JSON.stringify(updateUserGems.data.message));
                    }

                    const updateUserPremium = await axios.put(`${url}/users/${ctx.from?.id}/premium`, {
                        premium: true,
                        days: 1
                    })

                    if (updateUserPremium.status === 400) {
                        throw new Error(JSON.stringify(updateUserPremium.data));
                    }

                    await ctx.reply(`
            üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> –í—ã —Å—Ç–∞–ª–∏ –æ–±–ª–∞–¥–∞—Ç–µ–ª–µ–º ‚≠ê <b>PREMIUM</b> ‚≠ê –Ω–∞ 1 –¥–µ–Ω—å!`, {
                        parse_mode: 'HTML'
                    });

                    return ctx.scene.enter('profileScene');
                } catch (err) {
                    if (err instanceof Error) {
                        console.error(err.message)
                    } else {
                        console.error(err)
                    }

                    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π —Å—á–µ—Ç.')
                }
            case 'exit':
                ctx.session.exitGems = true;

                return ctx.scene.enter('shopScene');

            default:
                ctx.reply('–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
                break
        }

        return ctx.scene.leave();
    }
});

export const caseScene = new Scenes.WizardScene<MyContext>('caseScene', async (ctx) => {

    const url = process.env.URL;

    const req = await axios.get(`${url}/users/${ctx.from?.id}`);

    if (req.status === 400) {
        throw new Error(`–û—à–∏–±–∫–∞: ${JSON.stringify(req.data.message)}`);
    }

    const user = req.data.message;

    await redis.hset(`case-${ctx.from?.id}`, {
        caseBronza: user.caseBronza,
        caseSilver: user.caseSilver,
        caseGold: user.caseGold,
        casePlatinum: user.casePlatinum,
        caseMystery: user.caseMystery,
        caseEveryDay: user.caseEveryDay,
    });

    await redis.expire(`case-${ctx.from?.id}`, 600);

    const casesRedis = await redis.hgetall(`case-${ctx.from?.id}`);

    if (ctx.session.exitGems) {
        ctx.session.exitGems = false

        const editMessage = await editMessageOnlyText(ctx,
            `<b>üì¶ –î–æ—Å—Ç—É—Ä–Ω—ã–µ –∫–µ–π—Å—ã:</b>\n\n` +
            `1Ô∏è‚É£ <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–µ–π—Å</b> [${casesRedis.caseEveryDay}]\n` +
            `2Ô∏è‚É£ <b>–ë—Ä–æ–Ω–∑–æ–≤—ã–π –∫–µ–π—Å</b> [${casesRedis.caseBronza}] \n` +
            `3Ô∏è‚É£ <b>–°–µ—Ä–µ–±—Ä–µ–Ω–Ω—ã–π –∫–µ–π—Å</b> [${casesRedis.caseSilver}]\n` +
            `4Ô∏è‚É£ <b>–ó–æ–ª–æ—Ç–æ–π –∫–µ–π—Å</b> [${casesRedis.caseGold}]\n` +
            `5Ô∏è‚É£ <b>–ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π –∫–µ–π—Å</b> [${casesRedis.casePlatinum}]\n` +
            `6Ô∏è‚É£ <b>–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–µ–π—Å</b> [${casesRedis.caseMystery}]\n` +
            `7Ô∏è‚É£ <b>–ú–∞–≥–∞–∑–∏–Ω –∫–µ–π—Å–æ–≤</b>\n\n` +
            `üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.`, {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '1',
                            callback_data: '1-case'
                        },
                        {
                            text: '2',
                            callback_data: '2-case'
                        },
                        {
                            text: '3',
                            callback_data: '3-case'
                        },
                        {
                            text: '4',
                            callback_data: '4-case'
                        },
                    ],
                    [
                        {
                            text: '5',
                            callback_data: '5-case'
                        },
                        {
                            text: '6',
                            callback_data: '6-case'
                        },
                        {
                            text: '7',
                            callback_data: '7-case'
                        }
                    ]
                ],
                resize_keyboard: true,
                one_time_keyboard: false
            }
        });

        if (!editMessage) {
            await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            return
        }

        return ctx.wizard.next();
    }

    await ctx.reply(
        `<b>üì¶ –î–æ—Å—Ç—É—Ä–Ω—ã–µ –∫–µ–π—Å—ã:</b>\n\n` +
        `1Ô∏è‚É£ <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–µ–π—Å</b> [${casesRedis.caseEveryDay}]\n` +
        `2Ô∏è‚É£ <b>–ë—Ä–æ–Ω–∑–æ–≤—ã–π –∫–µ–π—Å</b> [${casesRedis.caseBronza}] \n` +
        `3Ô∏è‚É£ <b>–°–µ—Ä–µ–±—Ä–µ–Ω–Ω—ã–π –∫–µ–π—Å</b> [${casesRedis.caseSilver}]\n` +
        `4Ô∏è‚É£ <b>–ó–æ–ª–æ—Ç–æ–π –∫–µ–π—Å</b> [${casesRedis.caseGold}]\n` +
        `5Ô∏è‚É£ <b>–ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π –∫–µ–π—Å</b> [${casesRedis.casePlatinum}]\n` +
        `6Ô∏è‚É£ <b>–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–µ–π—Å</b> [${casesRedis.caseMystery}]\n` +
        `7Ô∏è‚É£ <b>–ú–∞–≥–∞–∑–∏–Ω –∫–µ–π—Å–æ–≤</b>\n\n` +
        `üìå –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.`,
        {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '1',
                            callback_data: '1-case'
                        },
                        {
                            text: '2',
                            callback_data: '2-case'
                        },
                        {
                            text: '3',
                            callback_data: '3-case'
                        },
                        {
                            text: '4',
                            callback_data: '4-case'
                        },
                    ],
                    [
                        {
                            text: '5',
                            callback_data: '5-case'
                        },
                        {
                            text: '6',
                            callback_data: '6-case'
                        },
                        {
                            text: '7',
                            callback_data: '7-case'
                        }
                    ]
                ],
                resize_keyboard: true,
                one_time_keyboard: false
            }
        }
    ).then((sendMessage) => {
        ctx.session.sendMessage = sendMessage.message_id;
    });

    return ctx.wizard.next();
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    if ("data" in ctx.callbackQuery) {
        const dataCalback = ctx.callbackQuery.data;

        switch (dataCalback) {
            case '1-case':
                await ctx.scene.enter('caseEveryDayScene');
                break

            case '2-case':
                await ctx.scene.enter('caseBronzaScene');
                break

            case '3-case':
                await ctx.scene.enter('caseSilverScene');
                break

            case '4-case':
                await ctx.scene.enter('caseGoldScene');
                break

            case '5-case':
                await ctx.scene.enter('casePlatinumScene');
                break

            case '6-case':
                await ctx.scene.enter('caseMysteryScene');
                break

            case '7-case':
                await ctx.scene.enter('caseShopScene');
                break

            default:
                break
        }
    }
});

export const referalScene = new Scenes.WizardScene<MyContext>('referalScene', async (ctx) => {
    await ctx.reply(
        `üéâ <b>–ù–∞–≥—Ä–∞–¥—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∫—É!</b>\n\n` +
        `–ö–æ–≥–¥–∞ –≤—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞, –≤—ã –æ–±–∞ –ø–æ–ª—É—á–∏—Ç–µ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã! üèÜ\n\n` +
        `üí† <b>–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:</b>\n` +
        `‚Ä¢ 7,500 <b>–≥–µ–º–æ–≤</b>\n` +
        `‚Ä¢ 1 <b>–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–µ–π—Å</b>\n` +
        `‚Ä¢ 1 <b>–ó–æ–ª–æ—Ç–æ–π –∫–µ–π—Å</b>\n\n` +
        `üéÅ <b>–í–∞—à –¥—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç:</b>\n` +
        `‚Ä¢ 5,000 <b>–≥–µ–º–æ–≤</b>\n` +
        `‚Ä¢ 1 <b>–ú–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–µ–π—Å</b>\n` +
        `‚Ä¢ 1 <b>–ë—Ä–æ–Ω–∑–æ–≤—ã–π –∫–µ–π—Å</b>\n\n` +
        `–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã! üéâ\n\n` +
        `üëâ <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:</b> https://t.me/nexycon_bot?start=${ctx.from?.id}`,
        {
            parse_mode: 'HTML'
        }
    );

    return ctx.wizard.next();
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }
});

export const shopScene = new Scenes.WizardScene<MyContext>('shopScene', async (ctx) => {
    if (ctx.session.exitGems) {
        const editMessage = await editMessageOnlyText(ctx,
            `<b>üõí –ú–∞–≥–∞–∑–∏–Ω</b>\n\n` +
            `1Ô∏è‚É£ <b>–ì–µ–º—ã</b> ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–µ–π—Å–æ–≤ –∏ –ø–æ–≤—ã—à–µ–Ω–∏—è –º–µ—Å—Ç–∞ –≤ —Ç–æ–ø–µ.\n` +
            `2Ô∏è‚É£ <b>–ü—Ä–µ–º–∏—É–º</b> ‚Äî –ø–æ–ª—É—á–∏—Ç–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏.\n` +
            `3Ô∏è‚É£ <b>–ö–µ–π—Å—ã</b> ‚Äî —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å –µ—â–µ –±–æ–ª—å—à–µ –≥–µ–º–æ–≤!\n\n` +
            `üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.`, {
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '1',
                            callback_data: '1-shop'
                        },
                        {
                            text: '2',
                            callback_data: '2-shop'
                        },
                        {
                            text: '3',
                            callback_data: '3-shop'
                        }
                    ]
                ]
            }
        });

        if (!editMessage) {
            await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            return
        }

        return ctx.wizard.next();
    }

    await ctx.reply(
        `<b>üõí –ú–∞–≥–∞–∑–∏–Ω</b>\n\n` +
        `1Ô∏è‚É£ <b>–ì–µ–º—ã</b> ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–µ–π—Å–æ–≤ –∏ –ø–æ–≤—ã—à–µ–Ω–∏—è –º–µ—Å—Ç–∞ –≤ —Ç–æ–ø–µ.\n` +
        `2Ô∏è‚É£ <b>–ü—Ä–µ–º–∏—É–º</b> ‚Äî –ø–æ–ª—É—á–∏—Ç–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏.\n` +
        `3Ô∏è‚É£ <b>–ö–µ–π—Å—ã</b> ‚Äî —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å –µ—â–µ –±–æ–ª—å—à–µ –≥–µ–º–æ–≤!\n\n` +
        `üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.`,
        {
            parse_mode: "HTML",
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '1',
                            callback_data: '1-shop'
                        },
                        {
                            text: '2',
                            callback_data: '2-shop'
                        },
                        {
                            text: '3',
                            callback_data: '3-shop'
                        }
                    ]
                ]
            }
        }
    ).then((sendMessage) => {
        ctx.session.sendMessage = sendMessage.message_id;
    });

    return ctx.wizard.next();
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }



    if ("data" in ctx.callbackQuery) {
        const dataCalback = ctx.callbackQuery.data;

        switch (dataCalback) {
            case '1-shop':
                return ctx.scene.enter('gemsShop');
            case '2-shop':
                return ctx.scene.enter('premiumSceneProfile');
            case '3-shop':
                ctx.session.shop = true;
                return ctx.scene.enter('caseShopScene');
            default:
                await ctx.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏!');
                return;
        }
    }
});

export const gemsShop = new Scenes.WizardScene<MyContext>('gemsShop', async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    const editMessage = await editMessageOnlyText(ctx,
        `<b>üí† –ú–∞–≥–∞–∑–∏–Ω –≥–µ–º–æ–≤</b>\n\n` +
        `üîπ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ <b>–∫—É–ø–∏—Ç—å –≥–µ–º—ã –∑–∞ –∑–≤–µ–∑–¥—ã</b>.\n\n` +
        `üìå –ß–µ–º –±–æ–ª—å—à–µ –ø–æ–∫—É–ø–∫–∞, —Ç–µ–º <b>–≤—ã–≥–æ–¥–Ω–µ–µ —Ü–µ–Ω–∞!</b>\n\n` +
        `‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∏–∂–µ:`, {
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: 'üí† –ö—É–ø–∏—Ç—å 10,000 –≥–µ–º–æ–≤ ‚Äî 50 –∑–≤–µ–∑–¥',
                        callback_data: 'gems_10k'
                    }
                ],
                [
                    {
                        text: 'üí† –ö—É–ø–∏—Ç—å 100,000 –≥–µ–º–æ–≤ ‚Äî 450 –∑–≤–µ–∑–¥',
                        callback_data: 'gems_100k'
                    }
                ],
                [
                    {
                        text: 'üí† –ö—É–ø–∏—Ç—å 500,000 –≥–µ–º–æ–≤ ‚Äî 1,800 –∑–≤–µ–∑–¥',
                        callback_data: 'gems_500k'
                    }
                ],
                [
                    {
                        text: 'üí† –ö—É–ø–∏—Ç—å 1,000,000 –≥–µ–º–æ–≤ ‚Äî 3,200 –∑–≤–µ–∑–¥',
                        callback_data: 'gems_1m'
                    }
                ],
                [
                    {
                        text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥',
                        callback_data: 'exit',
                    }
                ]
            ]
        }
    });

    if (!editMessage) {
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        return
    }

    ctx.session.exitGems = false

    return ctx.wizard.next();
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    if ("data" in ctx.callbackQuery) {

        const message = ctx.callbackQuery.data;

        switch (message) {
            case 'gems_10k':
                await PaymentsGems(ctx, 50, 10000);
                break
            case 'gems_100k':
                await PaymentsGems(ctx, 450, 100000);
                break
            case 'gems_500k':
                await PaymentsGems(ctx, 1800, 500000);
                break
            case 'gems_1m':
                await PaymentsGems(ctx, 3200, 1000000);
                break
            case 'exit':
                ctx.session.exitGems = true;

                return ctx.scene.enter('shopScene')
            default:
                ctx.reply('–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±–π—Ç–µ –µ—â–µ —Ä–∞–∑')
                break
        }

        return ctx.scene.leave();
    }
})

const SaveEdit = async (ctx: MyContext, inputName: string) => {
    try {
        const url = process.env.URL;
        const urlPath = `${url}/users/${ctx.from?.id}`;
        const inputNameObj = await redis.hget(`user-${ctx.from?.id}`, inputName);
        const body = { [inputName]: inputNameObj };

        const req = await axios.patch(urlPath, body);

        if (req.status === 400) {
            throw new Error(JSON.stringify(req.data) + req.status)
        }

        await ctx.scene.enter('profileScene');
    } catch (err) {
        if (err instanceof Error) {
            console.error(err.message);
        }
        ctx.reply(`${err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
}

const updateStatistics = async (data: BodyStatistics, id: string) => {
    try {
        const url = process.env.URL;

        const req = await axios.patch(`${url}/users/${id}/statistics`, data);

        if (req.status === 400) {
            throw new Error(JSON.stringify(req.data.message));
        }

        return true
    } catch (err) {
        console.error(err);
        return false
    }
}

const editMessage = async (userData: any) => {
    return `
<b>${userData.premium === "1" ? '‚≠ê PREMIUM ‚≠ê' : 'üíò –ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}</b>  
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî  
üë§ <b>–ò–º—è:</b> ${userData.name}  
üéÇ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> ${userData.age}  
üìç <b>–ì–æ—Ä–æ–¥:</b> ${userData.city}  
üìñ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${userData.description}
üéØ<b>–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω:</b> ${userData.minAge} - ${userData.maxAge}      
`;

}

const editGenderSearchSave = async (gender: string, id: string, search: boolean) => {
    const url = process.env.URL;
    let bodyGender;

    if (gender === "true") {
        bodyGender = true
    } else if (gender === "false") {
        bodyGender = false
    }

    let urlGender;

    if (search) {
        urlGender = `${url}/users/${id}/gender/search`
    } else {
        urlGender = `${url}/users/${id}/gender`
    }

    try {
        const req = await axios.put(urlGender, {
            gender: bodyGender
        }, {
            validateStatus: () => true
        });

        if (req.status === 400) {
            throw new Error(JSON.stringify(req.data.message));
        }

        return { status: true }
    } catch (err) {
        let errMessage;
        if (err instanceof Error) {
            console.error(err.message);
            errMessage = err.message
        } else {
            console.error(err);
            errMessage = err
        }

        return { message: errMessage, status: false }
    }
}

export const sendGems = new Scenes.WizardScene<MyContext>('sendGems', async (ctx: any) => {
    if (ctx.session.exitGems) {
        console.log("work");
        ctx.wizard.selectStep(1);
        return ctx.wizard.steps[1](ctx);
    }

    await ctx.reply(`üí† <b>–ü–µ—Ä–µ–≤–æ–¥ –≥–µ–º–æ–≤</b>\n\n` +
        `üîπ –í–≤–µ–¥–∏—Ç–µ <b>ID</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–º—ã.\n`, {
        parse_mode: 'HTML'
    });


    return ctx.wizard.next();
}, async (ctx) => {
    console.log('nextWizard');

    if (ctx.session.exitGems) {

        const url = process.env.URL
        const req = await axios.get(`${url}/users/${ctx.from?.id}`, {
            validateStatus: () => true
        });

        if (req.status === 400) {
            await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –≥–µ–º–æ–≤ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            return
        }


        const options = [100, 500, 1000, 5000];
        const available = options.filter(option => option <= req.data.message.coin);

        const keyboard: { text: string, callback_data: string }[][] = [];

        for (let i = 0; i < available.length; i += 2) {
            const row = [
                {
                    text: `${available[i]} üí†`,
                    callback_data: `send_${available[i]}`
                }
            ];

            if (available[i + 1]) {
                row.push({
                    text: `${available[i + 1]} üí†`,
                    callback_data: `send_${available[i + 1]}`
                });
            }

            keyboard.push(row);
        }

        const userCheck = await axios.get(`${url}/users/${ctx.session.sendGemsId}`);

        const user = userCheck.data.message;

        const iconsTop = getTopIcon(user.top);
        const formatNumberCoin = formatNumber(user.coin);

        const profileMessage = `  
<b>${user.premium ? '‚≠ê PREMIUM ‚≠ê' : 'üíò –ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}</b>
${iconsTop} <b>–ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ:</b> ${user.top}
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî  
${user.gender ? 'üë±üèª‚Äç‚ôÄÔ∏è' : 'üë±üèª'} <b>–ò–º—è:</b> ${user.name}  
üéÇ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> ${user.age}  
üìç <b>–ì–æ—Ä–æ–¥:</b> ${user.city}  
üìñ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${user.description}  
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî  
üí† <b>–ì–µ–º—ã:</b> ${formatNumberCoin}  
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
–°–∫–æ–ª—å–∫–æ –≥–µ–º–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?
`;
        const editMessage = await editMessageMorGems(ctx, profileMessage, {
            reply_markup: {
                inline_keyboard: [
                    ...keyboard,
                    [
                        {
                            text: '–í–≤–µ—Å—Ç–∏ —Å–≤–æ—ë –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                            callback_data: 'send_custom_amount'
                        }
                    ]
                ]
            }
        });

        if (!editMessage) {
            await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –ø–æ–∏—Å–∫ –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
            return
        }

        ctx.session.exitGems = false

        return ctx.wizard.next();
    }

    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                const message = ctx.message?.text;

                if (ctx.session.sendMessage) {
                    const result = await editMessageFromGetAnket(ctx);

                    if (!result) {
                        console.log('–û—à–∏–±–∫–∞ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è!');
                    }
                }

                if (message.startsWith('/')) {
                    switch (message) {
                        case '/profile':
                            return ctx.scene.enter('profileScene');
                        case '/search':
                            ctx.session.sendMessage = 0
                            ctx.session.keyboard = true
                            return ctx.scene.enter('ancetScene');
                        case '/send':
                            ctx.session.exitGems = false
                            ctx.session.sendMessage = 0
                            return ctx.scene.enter('sendGems');
                        case '/likes':
                            return ctx.scene.enter('getLikes');
                        case '/metches':
                            ctx.session.sendMessage = 0;
                            ctx.session.count = 0;
                            return ctx.scene.enter('getMetch');
                        case '/reported':
                            return ctx.scene.enter('reportScene');
                        case '/nexySession':
                            ctx.reply(JSON.stringify(ctx.session));
                            return ctx.scene.leave();
                        case '/top':
                            ctx.session.sendMessage = 0
                            ctx.session.countTop = 1
                            return ctx.scene.enter('topScenes');
                        case '/shop':
                            ctx.session.exitGems = false;
                            return ctx.scene.enter("shopScene");
                        case '/case':
                            return ctx.scene.enter('caseScene');
                        case '/ref':
                            return ctx.scene.enter("referalScene");
                        case '/help':
                            await ctx.reply(
                                '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
                                'üîπ <b>/profile</b> - –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å\n' +
                                'üîπ <b>/search</b> - –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç\n' +
                                'üîπ <b>/likes</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –ª–∞–π–∫–æ–≤\n' +
                                'üîπ <b>/metches</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ç—á–µ–π\n' +
                                'üîπ <b>/top</b> - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–ø–∞ —é–∑–µ—Ä–∞\n' +
                                'üîπ <b>/send</b> - –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–µ–º–æ–≤\n' +
                                'üîπ <b>/shop</b> - –ú–∞–≥–∞–∑–∏–Ω\n' +
                                'üîπ <b>/case</b> - –ö–µ–π—Å—ã\n' +
                                'üîπ <b>/ref</b> - –†–µ—Ñ–µ—Ä–∞–ª–∫–∞\n' +
                                'üîπ <b>/help</b> - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥',
                                {
                                    parse_mode: 'HTML'
                                }
                            );
                            break;
                        case '/luchaevaMuda':
                            return ctx.scene.enter('adminScene');
                        case '/reported':
                            return ctx.scene.enter('reportScene');
                        case '/exitNexy':
                            try {
                                const url = process.env.URL;

                                const getUser = await axios.get(`${url}/users/${ctx.from?.id}`);

                                const user = getUser.data.message;

                                if (user.role !== 'admin') {
                                    await ctx.reply('‚õî –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.');
                                    return
                                }

                                await ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –≤—Å–µ —Å–µ—Å—Å–∏–∏! –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–≤–æ–∞—Ç—å /clearNexySession –∏–ª–∏ /nexySession –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏–∏ —Å–µ—Å—Å–∏–∏')
                                return ctx.scene.leave();
                            } catch (err) {
                                if (err instanceof Error) {
                                    console.error(err.message);
                                } else {
                                    console.error(err);
                                }

                                await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —é–∑–µ—Ä–∞! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ–∑–µ —Ä–∞–∑');

                            }

                        default:
                            await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.');
                            break;
                    }
                    return;
                }

                switch (message) {
                    case 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
                        return ctx.scene.enter('profileScene');
                    case 'üîç –ü–æ–∏—Å–∫':
                        ctx.session.keyboard = true
                        ctx.session.sendMessage = 0
                        return ctx.scene.enter('ancetScene');
                    case '‚ù§Ô∏è –õ–∞–π–∫–∏':
                        return ctx.scene.enter('getLikes');
                    case 'üíå –ú–µ—Ç—á–∏':
                        ctx.session.count = 0;
                        ctx.session.sendMessage = 0;
                        return ctx.scene.enter('getMetch');
                    case 'ü•á –¢–æ–ø':
                        ctx.session.sendMessage = 0
                        ctx.session.countTop = 1
                        return ctx.scene.enter('topScenes');
                    case 'üì¶ –ö–µ–π—Å—ã':
                        return ctx.scene.enter('caseScene');
                    case 'üõí –ú–∞–≥–∞–∑–∏–Ω':
                        ctx.session.exitGems = false;
                        return ctx.scene.enter("shopScene");
                    case 'üîó –†–µ—Ñ–µ—Ä–∞–ª–∫–∞':
                        return ctx.scene.enter("referalScene");
                    case 'üí† –ì–µ–º—ã':
                        ctx.session.exitGems = false
                        ctx.session.sendMessage = 0
                        return ctx.scene.enter('sendGems');
                    default:
                        const url = process.env.URL
                        const req = await axios.get(`${url}/users/${ctx.from?.id}`, {
                            validateStatus: () => true
                        });

                        if (req.status === 400) {
                            await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –≥–µ–º–æ–≤ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                            return
                        }

                        if (!/^\d+$/.test(message)) {
                            await ctx.reply('‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π ID</b>\n\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å <u>—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã</u>, –±–µ–∑ –±—É–∫–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤.', {
                                parse_mode: 'HTML'
                            });
                            return;
                        }


                        const userCheck = await axios.get(`${url}/users/${message}`);

                        if (userCheck.status === 400) {
                            await ctx.reply('‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–π <u>ID</u> ‚Äî —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.', {
                                parse_mode: 'HTML'
                            });

                            return;
                        }

                        const coins = req.data.message.coin

                        if (coins < 100) {
                            await ctx.reply('üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–º–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞! –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –º–∏–Ω–∏–º—É–º 100 –≥–µ–º–æ–≤.');
                            return ctx.scene.enter('profileScene')
                        }

                        const options = [100, 500, 1000, 5000];
                        const available = options.filter(option => option <= req.data.message.coin);

                        const keyboard: { text: string, callback_data: string }[][] = [];

                        for (let i = 0; i < available.length; i += 2) {
                            const row = [
                                {
                                    text: `${available[i]} üí†`,
                                    callback_data: `send_${available[i]}`
                                }
                            ];

                            if (available[i + 1]) {
                                row.push({
                                    text: `${available[i + 1]} üí†`,
                                    callback_data: `send_${available[i + 1]}`
                                });
                            }

                            keyboard.push(row);
                        }

                        const user = userCheck.data.message;

                        const iconsTop = getTopIcon(user.top);
                        const formatNumberCoin = formatNumber(user.coin);

                        const profileMessage = `  
<b>${user.premium ? '‚≠ê PREMIUM ‚≠ê' : 'üíò –ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}</b>
${iconsTop} <b>–ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ:</b> ${user.top}
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî  
${user.gender ? 'üë±üèª‚Äç‚ôÄÔ∏è' : 'üë±üèª'} <b>–ò–º—è:</b> ${user.name}  
üéÇ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> ${user.age}  
üìç <b>–ì–æ—Ä–æ–¥:</b> ${user.city}  
üìñ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${user.description}  
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî  
üí† <b>–ì–µ–º—ã:</b> ${formatNumberCoin}  
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
–°–∫–æ–ª—å–∫–æ –≥–µ–º–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?
`;

                        await ctx.replyWithPhoto(user.photo.trim() || '', {
                            caption: profileMessage,
                            parse_mode: "HTML",
                            reply_markup: {
                                inline_keyboard: [
                                    ...keyboard,
                                    [
                                        {
                                            text: '–í–≤–µ—Å—Ç–∏ —Å–≤–æ—ë –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                                            callback_data: 'send_custom_amount'
                                        }
                                    ]
                                ]
                            }
                        }).then((sendMessage) => {
                            ctx.session.sendMessage = sendMessage.message_id;
                        });;

                        ctx.session.sendGemsId = user.id;

                        return ctx.wizard.next()
                }
            }
        }
        return
    }
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    if ('data' in ctx.callbackQuery) {
        const message = ctx.callbackQuery.data;

        if (message === 'send_custom_amount') {
            return ctx.scene.enter('sendGemsCustom');
        } else if (message.startsWith('send_')) {
            const parts = message.split('_');
            const value = Number(parts[1]);
            const url = process.env.URL;
            try {
                const reqCoin = await axios.put(`${url}/match/coin/${ctx.from?.id}/${ctx.session.sendGemsId}`,
                    {
                        count: value
                    },
                    {
                        validateStatus: () => true
                    }
                );

                if (reqCoin.status === 401) {
                    await ctx.reply(JSON.stringify(reqCoin.data.message));
                }

                if (reqCoin.status === 400) {
                    throw new Error(JSON.stringify(reqCoin.data.message));
                }

                const result = await editMessageFromGetAnket(ctx);

                if (!result) {
                    await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
                }

                try {
                    const reqMessage = await axios.post(`https://api.telegram.org/bot${process.env.TELEG_TOKEN}/sendMessage`, {
                        chat_id: ctx.session.sendGemsId,
                        text: `<b>üéÅ –ü–µ—Ä–µ–≤–æ–¥ –≥–µ–º–æ–≤</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>${ctx.from?.id}</code> –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º <b>${value} üí†</b>!`,
                        parse_mode: "HTML"
                    }, {
                        validateStatus: () => true
                    });


                    if (reqMessage.status === 400) {
                        throw new Error(JSON.stringify(reqMessage.data));
                    }
                } catch (err) {
                    if (err instanceof Error) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–µ–º–æ–≤' + err.message)
                    } else {
                        console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–µ–º–æ–≤' + err)
                    }
                }


                return ctx.scene.enter('profileScene')
            } catch (err) {
                if (err instanceof Error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–µ–º–æ–≤' + err.message)
                } else {
                    console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–µ–º–æ–≤' + err)
                }

                await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
            }

        }
    }
});

export const sendGemsCustom = new Scenes.WizardScene<MyContext>('sendGemsCustom', async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    const editMessage = await editMessageMorGems(ctx, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–º–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–µ—Å—å –±–∞–ª–∞–Ω—Å ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ', {
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –≥–µ–º—ã',
                        callback_data: 'send_all'
                    }
                ],
                [
                    {
                        text: '–ù–∞–∑–∞–¥',
                        callback_data: 'exit'
                    }
                ]
            ]
        }
    });

    if (!editMessage) {
        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –ø–æ–∏—Å–∫ –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.');
        return
    }

    return ctx.wizard.next();
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                if (!/^\d+$/.test(ctx.message.text)) {
                    await ctx.reply(
                        '‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ</b>\n\n–í–≤–µ–¥–∏—Ç–µ <u>—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ</u> ‚Äî –±–µ–∑ –±—É–∫–≤, –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤.\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>500</code>',
                        { parse_mode: 'HTML' }
                    );
                    return;
                }


                const value = Number(ctx.message.text);

                if (value < 100) {
                    await ctx.reply(
                        'üö´ <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞</b> —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>100 –≥–µ–º–æ–≤</b>.\n\n' +
                        '–í–≤–µ–¥–∏—Ç–µ <b>—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 100</b>, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.',
                        { parse_mode: 'HTML' }
                    );

                    return
                }


                try {
                    const url = process.env.URL;

                    const reqCoin = await axios.put(`${url}/match/coin/${ctx.from?.id}/${ctx.session.sendGemsId}`,
                        {
                            count: value
                        },
                        {
                            validateStatus: () => true
                        }
                    );

                    if (reqCoin.status === 401) {
                        console.log(reqCoin.data.message)
                        await ctx.reply(
                            'üö´ <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–µ–º–æ–≤!</b>\n\n' +
                            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.',
                            { parse_mode: 'HTML' }
                        );

                        return ctx.scene.enter('profileScene')
                    }

                    if (reqCoin.status === 400) {
                        throw new Error(JSON.stringify(reqCoin.data.message));
                    }

                    const result = await editMessageFromGetAnket(ctx);

                    if (!result) {
                        await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
                    }

                    try {
                        const reqMessage = await axios.post(`https://api.telegram.org/bot${process.env.TELEG_TOKEN}/sendMessage`, {
                            chat_id: ctx.session.sendGemsId,
                            text: `<b>üéÅ –ü–µ—Ä–µ–≤–æ–¥ –≥–µ–º–æ–≤</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>${ctx.from?.id}</code> –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º <b>${value} üí†</b>!`,
                            parse_mode: "HTML"
                        }, {
                            validateStatus: () => true
                        });


                        if (reqMessage.status === 400) {
                            throw new Error(JSON.stringify(reqMessage.data));
                        }
                    } catch (err) {
                        if (err instanceof Error) {
                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–µ–º–æ–≤' + err.message)
                        } else {
                            console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–µ–º–æ–≤' + err)
                        }
                    }

                    return ctx.scene.enter('profileScene')
                } catch (err) {
                    if (err instanceof Error) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–µ–º–æ–≤' + err.message)
                    } else {
                        console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–µ–º–æ–≤' + err)
                    }

                    await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
                    return
                }
            }
        }
        return
    }

    if ('data' in ctx.callbackQuery) {
        const message = ctx.callbackQuery.data;

        if (message === 'send_all') {
            const editMessage = await editMessageMorGems(ctx, '<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –≥–µ–º—ã?</b>', {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ',
                                callback_data: 'yes'
                            }
                        ],
                        [
                            {
                                text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥',
                                callback_data: 'no'
                            }
                        ]
                    ]
                }
            });

            if (!editMessage) {
                await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                return
            }

            return ctx.wizard.next();
        } else if (message === 'exit') {
            ctx.session.exitGems = true
            return ctx.scene.enter('sendGems')
        }
    }
}, async (ctx) => {
    if (!ctx.callbackQuery) {
        if (ctx.message !== undefined) {
            if ('text' in ctx.message) {
                await handleCommand1(ctx);
            }
        }
        return
    }

    if ('data' in ctx.callbackQuery) {
        const message = ctx.callbackQuery.data;

        if (message === 'no') {
            return ctx.scene.enter('sendGemsCustom')
        } else if (message === 'yes') {
            const url = process.env.URL;

            const req = await axios.get(`${url}/users/${ctx.from?.id}`, {
                validateStatus: () => true
            });

            if (req.status === 400) {
                await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –≥–µ–º–æ–≤ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                return
            }

            const value = req.data.message.coin

            const result2 = await sendGemsFuction(value, ctx);

            if (!result2.status) {
                console.error(result2?.message);
                return
            }

            return ctx.scene.enter('profileScene')
        } else {
            await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –í—ã –Ω–∞–∂–∞–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ.')
        }
    }
})


const sendGemsFuction = async (value: number, ctx: any) => {
    try {
        const url = process.env.URL;

        const reqCoin = await axios.put(`${url}/match/coin/${ctx.from?.id}/${ctx.session.sendGemsId}`,
            {
                count: value
            },
            {
                validateStatus: () => true
            }
        );

        if (reqCoin.status === 400) {
            throw new Error(JSON.stringify(reqCoin.data.message));
        }

        const result = await editMessageFromGetAnket(ctx);

        if (!result) {
            await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
        }

        try {
            const reqMessage = await axios.post(`https://api.telegram.org/bot${process.env.TELEG_TOKEN}/sendMessage`, {
                chat_id: ctx.session.sendGemsId,
                text: `<b>üéÅ –ü–µ—Ä–µ–≤–æ–¥ –≥–µ–º–æ–≤</b>\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>${ctx.from?.id}</code> –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º <b>${value} üí†</b>!`,
                parse_mode: "HTML"
            }, {
                validateStatus: () => true
            });


            if (reqMessage.status === 400) {
                throw new Error(JSON.stringify(reqMessage.data));
            }
        } catch (err) {
            if (err instanceof Error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–µ–º–æ–≤' + err.message)
            } else {
                console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–µ–º–æ–≤' + err)
            }
        }

        return { status: true }
    } catch (err) {
        let errMessage;

        if (err instanceof Error) {
            errMessage = err.message
        } else {
            console.error(err);
            errMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ '
        }

        return { message: errMessage, status: false }
    }
}


// const nameButtomctx3 = interactionButtonEdit(useState[userId].name.value || true);